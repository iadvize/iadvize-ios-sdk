// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IAdvizeConversationSDK
import AVFoundation
import Alamofire
import AlamofireImage
import Apollo
import ConversationUI
import CoreServices
import Foundation
import Gifu
@_exported import IAdvizeConversationSDK
import JWT
import MobileCoreServices
import Photos
import SafariServices
import Security
import Swift
import SwiftGraylog
import SystemConfiguration
import UIKit
import UserNotifications
import XMPPFramework
public enum GraphQL {
  public enum Language : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
    public typealias RawValue = Swift.String
    case aa
    case ab
    case ae
    case af
    case ak
    case am
    case an
    case ar
    case `as`
    case av
    case ay
    case az
    case ba
    case be
    case bg
    case bh
    case bi
    case bm
    case bn
    case bo
    case br
    case bs
    case ca
    case ce
    case ch
    case co
    case cr
    case cs
    case cu
    case cv
    case cy
    case da
    case de
    case dv
    case dz
    case ee
    case el
    case en
    case eo
    case es
    case et
    case eu
    case fa
    case ff
    case fi
    case fj
    case fo
    case fr
    case fy
    case ga
    case gd
    case gl
    case gn
    case gu
    case gv
    case ha
    case he
    case hi
    case ho
    case hr
    case ht
    case hu
    case hy
    case hz
    case ia
    case id
    case ie
    case ig
    case ii
    case ik
    case `in`
    case io
    case `is`
    case it
    case iu
    case iw
    case ja
    case ji
    case jv
    case ka
    case kg
    case ki
    case kj
    case kk
    case kl
    case km
    case kn
    case ko
    case kr
    case ks
    case ku
    case kv
    case kw
    case ky
    case la
    case lb
    case lg
    case li
    case ln
    case lo
    case lt
    case lu
    case lv
    case mg
    case mh
    case mi
    case mk
    case ml
    case mn
    case mo
    case mr
    case ms
    case mt
    case my
    case na
    case nb
    case nd
    case ne
    case ng
    case nl
    case nn
    case no
    case nr
    case nv
    case ny
    case oc
    case oj
    case om
    case or
    case os
    case pa
    case pi
    case pl
    case ps
    case pt
    case qu
    case rm
    case rn
    case ro
    case ru
    case rw
    case sa
    case sc
    case sd
    case se
    case sg
    case si
    case sk
    case sl
    case sm
    case sn
    case so
    case sq
    case sr
    case ss
    case st
    case su
    case sv
    case sw
    case ta
    case te
    case tg
    case th
    case ti
    case tk
    case tl
    case tn
    case to
    case tr
    case ts
    case tt
    case tw
    case ty
    case ug
    case uk
    case ur
    case uz
    case ve
    case vi
    case vo
    case wa
    case wo
    case xh
    case yi
    case yo
    case za
    case zh
    case zu
    case __unknown(IAdvizeConversationSDK.GraphQL.Language.RawValue)
    public init?(rawValue: IAdvizeConversationSDK.GraphQL.Language.RawValue)
    public var rawValue: IAdvizeConversationSDK.GraphQL.Language.RawValue {
      get
    }
    public static func == (lhs: IAdvizeConversationSDK.GraphQL.Language, rhs: IAdvizeConversationSDK.GraphQL.Language) -> Swift.Bool
    public static var allCases: [IAdvizeConversationSDK.GraphQL.Language] {
      get
    }
    public typealias AllCases = [IAdvizeConversationSDK.GraphQL.Language]
  }
  public struct SDKEventInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(sdkMoreInformationTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKMoreInformationTouchedInput?> = nil, sdkConversationReducedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKConversationReducedInput?> = nil, sdkChatButtonTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKChatButtonTouchedInput?> = nil, sdkNotificationTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKNotificationTouchedInput?> = nil)
    public var sdkMoreInformationTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKMoreInformationTouchedInput?> {
      get
      set
    }
    public var sdkConversationReducedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKConversationReducedInput?> {
      get
      set
    }
    public var sdkChatButtonTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKChatButtonTouchedInput?> {
      get
      set
    }
    public var sdkNotificationTouchedInput: Swift.Optional<IAdvizeConversationSDK.GraphQL.SDKNotificationTouchedInput?> {
      get
      set
    }
  }
  public struct SDKMoreInformationTouchedInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(eventId: Swift.String, eventTime: Swift.String)
    public var eventId: Swift.String {
      get
      set
    }
    public var eventTime: Swift.String {
      get
      set
    }
  }
  public struct SDKConversationReducedInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(eventId: Swift.String, eventTime: Swift.String)
    public var eventId: Swift.String {
      get
      set
    }
    public var eventTime: Swift.String {
      get
      set
    }
  }
  public struct SDKChatButtonTouchedInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(eventId: Swift.String, eventTime: Swift.String, unreadCount: Swift.Int)
    public var eventId: Swift.String {
      get
      set
    }
    public var eventTime: Swift.String {
      get
      set
    }
    public var unreadCount: Swift.Int {
      get
      set
    }
  }
  public struct SDKNotificationTouchedInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(eventId: Swift.String, eventTime: Swift.String)
    public var eventId: Swift.String {
      get
      set
    }
    public var eventTime: Swift.String {
      get
      set
    }
  }
  public struct MessageAttachmentInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(image: Swift.Optional<IAdvizeConversationSDK.GraphQL.ImageInput?> = nil, offer: Swift.Optional<IAdvizeConversationSDK.GraphQL.OfferInput?> = nil, link: Swift.Optional<IAdvizeConversationSDK.GraphQL.LinkInput?> = nil, product: Swift.Optional<IAdvizeConversationSDK.GraphQL.ProductInput?> = nil, file: Swift.Optional<IAdvizeConversationSDK.GraphQL.FileInput?> = nil, quickReplyMenu: Swift.Optional<IAdvizeConversationSDK.GraphQL.QuickReplyMenuInput?> = nil, unsupported: Swift.Optional<IAdvizeConversationSDK.GraphQL.UnsupportedInput?> = nil)
    public var image: Swift.Optional<IAdvizeConversationSDK.GraphQL.ImageInput?> {
      get
      set
    }
    public var offer: Swift.Optional<IAdvizeConversationSDK.GraphQL.OfferInput?> {
      get
      set
    }
    public var link: Swift.Optional<IAdvizeConversationSDK.GraphQL.LinkInput?> {
      get
      set
    }
    public var product: Swift.Optional<IAdvizeConversationSDK.GraphQL.ProductInput?> {
      get
      set
    }
    public var file: Swift.Optional<IAdvizeConversationSDK.GraphQL.FileInput?> {
      get
      set
    }
    public var quickReplyMenu: Swift.Optional<IAdvizeConversationSDK.GraphQL.QuickReplyMenuInput?> {
      get
      set
    }
    public var unsupported: Swift.Optional<IAdvizeConversationSDK.GraphQL.UnsupportedInput?> {
      get
      set
    }
  }
  public struct ImageInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(fileName: Swift.String, mimeType: Swift.String, url: Swift.String)
    public var fileName: Swift.String {
      get
      set
    }
    public var mimeType: Swift.String {
      get
      set
    }
    public var url: Swift.String {
      get
      set
    }
  }
  public struct OfferInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(title: Swift.String, imageUrl: Swift.String, url: Swift.String, description: Swift.String)
    public var title: Swift.String {
      get
      set
    }
    public var imageUrl: Swift.String {
      get
      set
    }
    public var url: Swift.String {
      get
      set
    }
    public var description: Swift.String {
      get
      set
    }
  }
  public struct LinkInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(url: Swift.String, title: Swift.String)
    public var url: Swift.String {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
  }
  public struct ProductInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(title: Swift.String, productUrl: Swift.String, isAvailable: Swift.Bool, imageUrl: Swift.String, catalogPrice: Swift.String, promotionPrice: Swift.Optional<Swift.String?> = nil)
    public var title: Swift.String {
      get
      set
    }
    public var productUrl: Swift.String {
      get
      set
    }
    public var isAvailable: Swift.Bool {
      get
      set
    }
    public var imageUrl: Swift.String {
      get
      set
    }
    public var catalogPrice: Swift.String {
      get
      set
    }
    public var promotionPrice: Swift.Optional<Swift.String?> {
      get
      set
    }
  }
  public struct FileInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(fileName: Swift.String, mimeType: Swift.String, url: Swift.String)
    public var fileName: Swift.String {
      get
      set
    }
    public var mimeType: Swift.String {
      get
      set
    }
    public var url: Swift.String {
      get
      set
    }
  }
  public struct QuickReplyMenuInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(message: Swift.String, choices: [Swift.String])
    public var message: Swift.String {
      get
      set
    }
    public var choices: [Swift.String] {
      get
      set
    }
  }
  public struct UnsupportedInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(_unusedField: Swift.Optional<Swift.Bool?> = nil)
    public var _unusedField: Swift.Optional<Swift.Bool?> {
      get
      set
    }
  }
  public enum MobileDevicePlatform : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
    public typealias RawValue = Swift.String
    case apple
    case google
    case __unknown(IAdvizeConversationSDK.GraphQL.MobileDevicePlatform.RawValue)
    public init?(rawValue: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform.RawValue)
    public var rawValue: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform.RawValue {
      get
    }
    public static func == (lhs: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform, rhs: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform) -> Swift.Bool
    public static var allCases: [IAdvizeConversationSDK.GraphQL.MobileDevicePlatform] {
      get
    }
    public typealias AllCases = [IAdvizeConversationSDK.GraphQL.MobileDevicePlatform]
  }
  public enum ApplicationMode : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
    public typealias RawValue = Swift.String
    case dev
    case prod
    case __unknown(IAdvizeConversationSDK.GraphQL.ApplicationMode.RawValue)
    public init?(rawValue: IAdvizeConversationSDK.GraphQL.ApplicationMode.RawValue)
    public var rawValue: IAdvizeConversationSDK.GraphQL.ApplicationMode.RawValue {
      get
    }
    public static func == (lhs: IAdvizeConversationSDK.GraphQL.ApplicationMode, rhs: IAdvizeConversationSDK.GraphQL.ApplicationMode) -> Swift.Bool
    public static var allCases: [IAdvizeConversationSDK.GraphQL.ApplicationMode] {
      get
    }
    public typealias AllCases = [IAdvizeConversationSDK.GraphQL.ApplicationMode]
  }
  public struct VisitorContext : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(screenIdentifier: Foundation.UUID, language: IAdvizeConversationSDK.GraphQL.Language)
    public var screenIdentifier: Foundation.UUID {
      get
      set
    }
    public var language: IAdvizeConversationSDK.GraphQL.Language {
      get
      set
    }
  }
  public struct SDKTransactionInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(externalTransactionId: Swift.String, visitorDate: IAdvizeConversationSDK.DateTime, amount: Swift.Double, currency: IAdvizeConversationSDK.GraphQL.Currency)
    public var externalTransactionId: Swift.String {
      get
      set
    }
    public var visitorDate: IAdvizeConversationSDK.DateTime {
      get
      set
    }
    public var amount: Swift.Double {
      get
      set
    }
    public var currency: IAdvizeConversationSDK.GraphQL.Currency {
      get
      set
    }
  }
  public enum Currency : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
    public typealias RawValue = Swift.String
    case adp
    case aed
    case afa
    case afn
    case all
    case amd
    case ang
    case aoa
    case ars
    case ats
    case aud
    case awg
    case aym
    case azm
    case azn
    case bam
    case bbd
    case bdt
    case bef
    case bgl
    case bgn
    case bhd
    case bif
    case bmd
    case bnd
    case bob
    case bov
    case brl
    case bsd
    case btn
    case bwp
    case byb
    case byn
    case byr
    case bzd
    case cad
    case cdf
    case che
    case chf
    case chw
    case clf
    case clp
    case cny
    case cop
    case cou
    case crc
    case csd
    case cuc
    case cup
    case cve
    case cyp
    case czk
    case dem
    case djf
    case dkk
    case dop
    case dzd
    case eek
    case egp
    case ern
    case esp
    case etb
    case eur
    case fim
    case fjd
    case fkp
    case frf
    case gbp
    case gel
    case ghc
    case ghs
    case gip
    case gmd
    case gnf
    case grd
    case gtq
    case gwp
    case gyd
    case hkd
    case hnl
    case hrk
    case htg
    case huf
    case idr
    case iep
    case ils
    case inr
    case iqd
    case irr
    case isk
    case itl
    case jmd
    case jod
    case jpy
    case kes
    case kgs
    case khr
    case kmf
    case kpw
    case krw
    case kwd
    case kyd
    case kzt
    case lak
    case lbp
    case lkr
    case lrd
    case lsl
    case ltl
    case luf
    case lvl
    case lyd
    case mad
    case mdl
    case mga
    case mgf
    case mkd
    case mmk
    case mnt
    case mop
    case mro
    case mru
    case mtl
    case mur
    case mvr
    case mwk
    case mxn
    case mxv
    case myr
    case mzm
    case mzn
    case nad
    case ngn
    case nio
    case nlg
    case nok
    case npr
    case nzd
    case omr
    case pab
    case pen
    case pgk
    case php
    case pkr
    case pln
    case pte
    case pyg
    case qar
    case rol
    case ron
    case rsd
    case rub
    case rur
    case rwf
    case sar
    case sbd
    case scr
    case sdd
    case sdg
    case sek
    case sgd
    case shp
    case sit
    case skk
    case sll
    case sos
    case srd
    case srg
    case ssp
    case std
    case stn
    case svc
    case syp
    case szl
    case thb
    case tjs
    case tmm
    case tmt
    case tnd
    case top
    case tpe
    case trl
    case `try`
    case ttd
    case twd
    case tzs
    case uah
    case ugx
    case usd
    case usn
    case uss
    case uyi
    case uyu
    case uzs
    case veb
    case vef
    case ves
    case vnd
    case vuv
    case wst
    case xaf
    case xag
    case xau
    case xba
    case xbb
    case xbc
    case xbd
    case xcd
    case xdr
    case xfo
    case xfu
    case xof
    case xpd
    case xpf
    case xpt
    case xsu
    case xts
    case xua
    case xxx
    case yer
    case yum
    case zar
    case zmk
    case zmw
    case zwd
    case zwl
    case zwn
    case zwr
    case __unknown(IAdvizeConversationSDK.GraphQL.Currency.RawValue)
    public init?(rawValue: IAdvizeConversationSDK.GraphQL.Currency.RawValue)
    public var rawValue: IAdvizeConversationSDK.GraphQL.Currency.RawValue {
      get
    }
    public static func == (lhs: IAdvizeConversationSDK.GraphQL.Currency, rhs: IAdvizeConversationSDK.GraphQL.Currency) -> Swift.Bool
    public static var allCases: [IAdvizeConversationSDK.GraphQL.Currency] {
      get
    }
    public typealias AllCases = [IAdvizeConversationSDK.GraphQL.Currency]
  }
  public struct VisitorCustomDataInput : Apollo.GraphQLMapConvertible {
    public var graphQLMap: Apollo.GraphQLMap
    public init(key: Swift.String, stringValue: Swift.Optional<Swift.String?> = nil, intValue: Swift.Optional<Swift.Int?> = nil, floatValue: Swift.Optional<Swift.Double?> = nil, booleanValue: Swift.Optional<Swift.Bool?> = nil)
    public var key: Swift.String {
      get
      set
    }
    public var stringValue: Swift.Optional<Swift.String?> {
      get
      set
    }
    public var intValue: Swift.Optional<Swift.Int?> {
      get
      set
    }
    public var floatValue: Swift.Optional<Swift.Double?> {
      get
      set
    }
    public var booleanValue: Swift.Optional<Swift.Bool?> {
      get
      set
    }
  }
  final public class SdkUploadUrlsQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var contentType: Swift.String
    public init(contentType: Swift.String)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkUploadUrls: IAdvizeConversationSDK.GraphQL.SdkUploadUrlsQuery.Data.SdkUploadUrl? = nil)
      public var sdkUploadUrls: IAdvizeConversationSDK.GraphQL.SdkUploadUrlsQuery.Data.SdkUploadUrl? {
        get
        set
      }
      public struct SdkUploadUrl : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(writeUrl: Swift.String, readUrl: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var writeUrl: Swift.String {
          get
          set
        }
        public var readUrl: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class ConversationCreateMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var targetingRuleId: Foundation.UUID
    final public var language: IAdvizeConversationSDK.GraphQL.Language
    public init(targetingRuleId: Foundation.UUID, language: IAdvizeConversationSDK.GraphQL.Language)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(conversationCreate: IAdvizeConversationSDK.GraphQL.ConversationCreateMutation.Data.ConversationCreate? = nil)
      public var conversationCreate: IAdvizeConversationSDK.GraphQL.ConversationCreateMutation.Data.ConversationCreate? {
        get
        set
      }
      public struct ConversationCreate : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(conversation: IAdvizeConversationSDK.GraphQL.ConversationCreateMutation.Data.ConversationCreate.Conversation? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var conversation: IAdvizeConversationSDK.GraphQL.ConversationCreateMutation.Data.ConversationCreate.Conversation? {
          get
          set
        }
        public struct Conversation : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Foundation.UUID)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Foundation.UUID {
            get
            set
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkEventTrackMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var input: IAdvizeConversationSDK.GraphQL.SDKEventInput
    public init(input: IAdvizeConversationSDK.GraphQL.SDKEventInput)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkEventTrack: IAdvizeConversationSDK.GraphQL.SdkEventTrackMutation.Data.SdkEventTrack? = nil)
      public var sdkEventTrack: IAdvizeConversationSDK.GraphQL.SdkEventTrackMutation.Data.SdkEventTrack? {
        get
        set
      }
      public struct SdkEventTrack : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(eventId: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var eventId: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class FetchOngoingConversationQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    public init()
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(conversationsVisitorMessages: IAdvizeConversationSDK.GraphQL.FetchOngoingConversationQuery.Data.ConversationsVisitorMessage? = nil)
      public var conversationsVisitorMessages: IAdvizeConversationSDK.GraphQL.FetchOngoingConversationQuery.Data.ConversationsVisitorMessage? {
        get
        set
      }
      public struct ConversationsVisitorMessage : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(ongoingConversation: IAdvizeConversationSDK.GraphQL.FetchOngoingConversationQuery.Data.ConversationsVisitorMessage.OngoingConversation? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var ongoingConversation: IAdvizeConversationSDK.GraphQL.FetchOngoingConversationQuery.Data.ConversationsVisitorMessage.OngoingConversation? {
          get
          set
        }
        public struct OngoingConversation : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Foundation.UUID)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Foundation.UUID {
            get
            set
          }
        }
      }
    }
    @objc deinit
  }
  final public class FetchConversationMessagesQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var queryDocument: Swift.String {
      get
    }
    final public var pageCount: Swift.Int
    public init(pageCount: Swift.Int)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(conversationsVisitorMessages: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage? = nil)
      public var conversationsVisitorMessages: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage? {
        get
        set
      }
      public struct ConversationsVisitorMessage : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(ongoingConversation: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.OngoingConversation? = nil, messages: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var ongoingConversation: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.OngoingConversation? {
          get
          set
        }
        public var messages: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message? {
          get
          set
        }
        public struct OngoingConversation : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Foundation.UUID)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Foundation.UUID {
            get
            set
          }
        }
        public struct Message : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(pageInfo: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.PageInfo, edges: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge?]? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var pageInfo: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.PageInfo {
            get
            set
          }
          public var edges: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge?]? {
            get
            set
          }
          public struct PageInfo : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(hasNextPage: Swift.Bool, hasPreviousPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var hasNextPage: Swift.Bool {
              get
              set
            }
            public var hasPreviousPage: Swift.Bool {
              get
              set
            }
            public var startCursor: Swift.String? {
              get
              set
            }
            public var endCursor: Swift.String? {
              get
              set
            }
          }
          public struct Edge : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(cursor: Swift.String, node: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node)
            public var __typename: Swift.String {
              get
              set
            }
            public var cursor: Swift.String {
              get
              set
            }
            public var node: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node {
              get
              set
            }
            public struct Node : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public static func makeParticipantConversationMessage(createdAt: IAdvizeConversationSDK.DateTime, messageId: Swift.String, text: Swift.String? = nil, author: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author? = nil, sentAs: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA? = nil, attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node
              public static func makeSystemMessage(createdAt: IAdvizeConversationSDK.DateTime, systemMessageId: Foundation.UUID, attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node
              public var __typename: Swift.String {
                get
                set
              }
              public var createdAt: IAdvizeConversationSDK.DateTime {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationMessage: IAdvizeConversationSDK.GraphQL.ConversationMessage {
                  get
                  set
                }
                public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage? {
                  get
                  set
                }
                public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage? {
                  get
                  set
                }
              }
              public var asParticipantConversationMessage: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage? {
                get
                set
              }
              public struct AsParticipantConversationMessage : Apollo.GraphQLSelectionSet {
                public static let possibleTypes: [Swift.String]
                public static var selections: [Apollo.GraphQLSelection] {
                  get
                }
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public init(createdAt: IAdvizeConversationSDK.DateTime, messageId: Swift.String, text: Swift.String? = nil, author: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author? = nil, sentAs: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA? = nil, attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment])
                public var __typename: Swift.String {
                  get
                  set
                }
                public var createdAt: IAdvizeConversationSDK.DateTime {
                  get
                  set
                }
                public var messageId: Swift.String {
                  get
                  set
                }
                public var text: Swift.String? {
                  get
                  set
                }
                public var author: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author? {
                  get
                  set
                }
                public var sentAs: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA? {
                  get
                  set
                }
                public var attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment] {
                  get
                  set
                }
                public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Fragments {
                  get
                  set
                }
                public struct Fragments {
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public var conversationMessage: IAdvizeConversationSDK.GraphQL.ConversationMessage {
                    get
                    set
                  }
                  public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage {
                    get
                    set
                  }
                  public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage? {
                    get
                    set
                  }
                }
                public struct Author : Apollo.GraphQLSelectionSet {
                  public static let possibleTypes: [Swift.String]
                  public static var selections: [Apollo.GraphQLSelection] {
                    get
                  }
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public static func makeBot() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author
                  public var __typename: Swift.String {
                    get
                    set
                  }
                  public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.Fragments {
                    get
                    set
                  }
                  public struct Fragments {
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                      get
                      set
                    }
                    public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                      get
                      set
                    }
                    public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                      get
                      set
                    }
                    public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                      get
                      set
                    }
                    public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                      get
                      set
                    }
                    public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                      get
                      set
                    }
                    public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                      get
                      set
                    }
                  }
                  public var asVisitor: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsVisitor? {
                    get
                    set
                  }
                  public struct AsVisitor : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsVisitor.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsThirdPartyAccount? {
                    get
                    set
                  }
                  public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsThirdPartyAccount.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asIbbuManager: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsIbbuManager? {
                    get
                    set
                  }
                  public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsIbbuManager.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asProfessional: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsProfessional? {
                    get
                    set
                  }
                  public struct AsProfessional : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsProfessional.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asBot: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsBot? {
                    get
                    set
                  }
                  public struct AsBot : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsBot.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asExpert: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsExpert? {
                    get
                    set
                  }
                  public struct AsExpert : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Author.AsExpert.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert {
                        get
                        set
                      }
                    }
                  }
                }
                public struct SentA : Apollo.GraphQLSelectionSet {
                  public static let possibleTypes: [Swift.String]
                  public static var selections: [Apollo.GraphQLSelection] {
                    get
                  }
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public static func makeBot() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA
                  public var __typename: Swift.String {
                    get
                    set
                  }
                  public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.Fragments {
                    get
                    set
                  }
                  public struct Fragments {
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                      get
                      set
                    }
                    public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                      get
                      set
                    }
                    public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                      get
                      set
                    }
                    public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                      get
                      set
                    }
                    public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                      get
                      set
                    }
                    public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                      get
                      set
                    }
                    public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                      get
                      set
                    }
                  }
                  public var asVisitor: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsVisitor? {
                    get
                    set
                  }
                  public struct AsVisitor : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsVisitor.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsThirdPartyAccount? {
                    get
                    set
                  }
                  public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsThirdPartyAccount.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asIbbuManager: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsIbbuManager? {
                    get
                    set
                  }
                  public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsIbbuManager.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asProfessional: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsProfessional? {
                    get
                    set
                  }
                  public struct AsProfessional : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsProfessional.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asBot: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsBot? {
                    get
                    set
                  }
                  public struct AsBot : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsBot.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                        get
                        set
                      }
                    }
                  }
                  public var asExpert: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsExpert? {
                    get
                    set
                  }
                  public struct AsExpert : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init()
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.SentA.AsExpert.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                        get
                        set
                      }
                      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                        get
                        set
                      }
                      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                        get
                        set
                      }
                      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                        get
                        set
                      }
                      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                        get
                        set
                      }
                      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                        get
                        set
                      }
                      public var expert: IAdvizeConversationSDK.GraphQL.Expert {
                        get
                        set
                      }
                    }
                  }
                }
                public struct Attachment : Apollo.GraphQLSelectionSet {
                  public static let possibleTypes: [Swift.String]
                  public static var selections: [Apollo.GraphQLSelection] {
                    get
                  }
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public static func makeContextualInfosAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeListPickerAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeListPickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeTimePickerAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeTimePickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeAuthenticationRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeFailedAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeSuccessfulAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeApplePayPaymentRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeFailedApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeSuccessfulApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeAppleBusinessChatMessageExtensionAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeConversationBlockedAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeCardAttachment(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeCardBundleAttachment(cards: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeFileAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeFileBundleAttachment(attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeImageAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeLinkAttachment(url: Foundation.URL, title: Swift.String) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeOfferAttachment(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeProductAttachment(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeProductOfferAttachment(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeProductOfferBundleAttachment(productOffers: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeQuickReplyMenuAttachment(message: Swift.String, choices: [Swift.String]) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public static func makeUnsupportedAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment
                  public var __typename: Swift.String {
                    get
                    set
                  }
                  public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.Fragments {
                    get
                    set
                  }
                  public struct Fragments {
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                      get
                      set
                    }
                    public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                      get
                      set
                    }
                    public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                      get
                      set
                    }
                    public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                      get
                      set
                    }
                    public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                      get
                      set
                    }
                    public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                      get
                      set
                    }
                    public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                      get
                      set
                    }
                    public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                      get
                      set
                    }
                    public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                      get
                      set
                    }
                    public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                      get
                      set
                    }
                    public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                      get
                      set
                    }
                    public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                      get
                      set
                    }
                    public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                      get
                      set
                    }
                  }
                  public var asCardAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment? {
                    get
                    set
                  }
                  public struct AsCardAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? {
                      get
                      set
                    }
                    public var optionalTitle: Swift.String? {
                      get
                      set
                    }
                    public var optionalText: Swift.String? {
                      get
                      set
                    }
                    public var style: Swift.String? {
                      get
                      set
                    }
                    public var video: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? {
                      get
                      set
                    }
                    public var actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                    public struct Image : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(url: Foundation.URL, description: Swift.String)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var description: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                          get
                          set
                        }
                      }
                    }
                    public struct Video : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(url: Foundation.URL, description: Swift.String)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var description: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
                          get
                          set
                        }
                      }
                    }
                    public struct Action : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(url: Foundation.URL, title: Swift.String)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var title: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                          get
                          set
                        }
                      }
                    }
                  }
                  public var asCardBundleAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment? {
                    get
                    set
                  }
                  public struct AsCardBundleAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(cards: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var cards: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                    public struct Card : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action])
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? {
                        get
                        set
                      }
                      public var optionalTitle: Swift.String? {
                        get
                        set
                      }
                      public var optionalText: Swift.String? {
                        get
                        set
                      }
                      public var style: Swift.String? {
                        get
                        set
                      }
                      public var video: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? {
                        get
                        set
                      }
                      public var actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action] {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
                          get
                          set
                        }
                      }
                      public struct Image : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init(url: Foundation.URL, description: Swift.String)
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var url: Foundation.URL {
                          get
                          set
                        }
                        public var description: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                            get
                            set
                          }
                        }
                      }
                      public struct Video : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init(url: Foundation.URL, description: Swift.String)
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var url: Foundation.URL {
                          get
                          set
                        }
                        public var description: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
                            get
                            set
                          }
                        }
                      }
                      public struct Action : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init(url: Foundation.URL, title: Swift.String)
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var url: Foundation.URL {
                          get
                          set
                        }
                        public var title: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                            get
                            set
                          }
                        }
                      }
                    }
                  }
                  public var asFileAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileAttachment? {
                    get
                    set
                  }
                  public struct AsFileAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fileName: Swift.String {
                      get
                      set
                    }
                    public var mimeType: Swift.String {
                      get
                      set
                    }
                    public var url: Foundation.URL {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asFileBundleAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment? {
                    get
                    set
                  }
                  public struct AsFileBundleAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                    public struct Attachment : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var fileName: Swift.String {
                        get
                        set
                      }
                      public var mimeType: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
                          get
                          set
                        }
                      }
                    }
                  }
                  public var asImageAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsImageAttachment? {
                    get
                    set
                  }
                  public struct AsImageAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var fileName: Swift.String {
                      get
                      set
                    }
                    public var mimeType: Swift.String {
                      get
                      set
                    }
                    public var url: Foundation.URL {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsImageAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asLinkAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsLinkAttachment? {
                    get
                    set
                  }
                  public struct AsLinkAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(url: Foundation.URL, title: Swift.String)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var url: Foundation.URL {
                      get
                      set
                    }
                    public var title: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsLinkAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asOfferAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsOfferAttachment? {
                    get
                    set
                  }
                  public struct AsOfferAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var title: Swift.String {
                      get
                      set
                    }
                    public var imageUrl: Foundation.URL {
                      get
                      set
                    }
                    public var url: Foundation.URL {
                      get
                      set
                    }
                    public var description: Swift.String {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsOfferAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asProductAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductAttachment? {
                    get
                    set
                  }
                  public struct AsProductAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var title: Swift.String {
                      get
                      set
                    }
                    public var productUrl: Foundation.URL {
                      get
                      set
                    }
                    public var isAvailable: Swift.Bool {
                      get
                      set
                    }
                    public var imageUrl: Foundation.URL {
                      get
                      set
                    }
                    public var priceText: Swift.String {
                      get
                      set
                    }
                    public var promotionPriceText: Swift.String? {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asProductOfferAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment? {
                    get
                    set
                  }
                  public struct AsProductOfferAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? {
                      get
                      set
                    }
                    public var title: Swift.String {
                      get
                      set
                    }
                    public var priceText: Swift.String {
                      get
                      set
                    }
                    public var offerPriceText: Swift.String? {
                      get
                      set
                    }
                    public var optionalDescription: Swift.String? {
                      get
                      set
                    }
                    public var isAvailable: Swift.Bool {
                      get
                      set
                    }
                    public var actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                    public struct Image : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(url: Foundation.URL, description: Swift.String)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var description: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                          get
                          set
                        }
                      }
                    }
                    public struct Action : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(url: Foundation.URL, title: Swift.String)
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var url: Foundation.URL {
                        get
                        set
                      }
                      public var title: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                          get
                          set
                        }
                      }
                    }
                  }
                  public var asProductOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment? {
                    get
                    set
                  }
                  public struct AsProductOfferBundleAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(productOffers: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var productOffers: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                    public struct ProductOffer : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public init(image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action])
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var image: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? {
                        get
                        set
                      }
                      public var title: Swift.String {
                        get
                        set
                      }
                      public var priceText: Swift.String {
                        get
                        set
                      }
                      public var offerPriceText: Swift.String? {
                        get
                        set
                      }
                      public var optionalDescription: Swift.String? {
                        get
                        set
                      }
                      public var isAvailable: Swift.Bool {
                        get
                        set
                      }
                      public var actions: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action] {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
                          get
                          set
                        }
                      }
                      public struct Image : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init(url: Foundation.URL, description: Swift.String)
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var url: Foundation.URL {
                          get
                          set
                        }
                        public var description: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                            get
                            set
                          }
                        }
                      }
                      public struct Action : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init(url: Foundation.URL, title: Swift.String)
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var url: Foundation.URL {
                          get
                          set
                        }
                        public var title: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                            get
                            set
                          }
                        }
                      }
                    }
                  }
                  public var asQuickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment? {
                    get
                    set
                  }
                  public struct AsQuickReplyMenuAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(message: Swift.String, choices: [Swift.String])
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var message: Swift.String {
                      get
                      set
                    }
                    public var choices: [Swift.String] {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
                        get
                        set
                      }
                    }
                  }
                  public var asUnsupportedAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsUnsupportedAttachment? {
                    get
                    set
                  }
                  public struct AsUnsupportedAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(_unusedField: Swift.Bool? = nil)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var _unusedField: Swift.Bool? {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsParticipantConversationMessage.Attachment.AsUnsupportedAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
                        get
                        set
                      }
                      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
                        get
                        set
                      }
                      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
                        get
                        set
                      }
                      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
                        get
                        set
                      }
                      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
                        get
                        set
                      }
                      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
                        get
                        set
                      }
                      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
                        get
                        set
                      }
                      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
                        get
                        set
                      }
                      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
                        get
                        set
                      }
                      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
                        get
                        set
                      }
                      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
                        get
                        set
                      }
                      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
                        get
                        set
                      }
                      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment {
                        get
                        set
                      }
                    }
                  }
                }
              }
              public var asSystemMessage: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage? {
                get
                set
              }
              public struct AsSystemMessage : Apollo.GraphQLSelectionSet {
                public static let possibleTypes: [Swift.String]
                public static var selections: [Apollo.GraphQLSelection] {
                  get
                }
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public init(createdAt: IAdvizeConversationSDK.DateTime, systemMessageId: Foundation.UUID, attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment])
                public var __typename: Swift.String {
                  get
                  set
                }
                public var createdAt: IAdvizeConversationSDK.DateTime {
                  get
                  set
                }
                public var systemMessageId: Foundation.UUID {
                  get
                  set
                }
                public var attachments: [IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment] {
                  get
                  set
                }
                public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Fragments {
                  get
                  set
                }
                public struct Fragments {
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public var conversationMessage: IAdvizeConversationSDK.GraphQL.ConversationMessage {
                    get
                    set
                  }
                  public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage? {
                    get
                    set
                  }
                  public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage {
                    get
                    set
                  }
                }
                public struct Attachment : Apollo.GraphQLSelectionSet {
                  public static let possibleTypes: [Swift.String]
                  public static var selections: [Apollo.GraphQLSelection] {
                    get
                  }
                  public var resultMap: Apollo.ResultMap {
                    get
                  }
                  public init(unsafeResultMap: Apollo.ResultMap)
                  public static func makeEngagementRuleTriggeredSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeTransferredToUserSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeTransferredToRoutingRuleSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeVisitorBlockedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeVisitorLeftSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeVisitorReturnedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeNavigationChangedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeSupervisorCommentSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeConversationClosedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeConversationPushedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeConversationSnoozedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeConversationReleasedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeVisitorNotificationSettingsRequestedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeVisitorNotificationSettingsSetSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeResumeMessageSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeAutomaticMessageSentSystemAttachment(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public static func makeUnsupportedSystemMessageAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment
                  public var __typename: Swift.String {
                    get
                    set
                  }
                  public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.Fragments {
                    get
                    set
                  }
                  public struct Fragments {
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
                      get
                      set
                    }
                    public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
                      get
                      set
                    }
                    public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
                      get
                      set
                    }
                  }
                  public var asAutomaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment? {
                    get
                    set
                  }
                  public struct AsAutomaticMessageSentSystemAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var text: Swift.String {
                      get
                      set
                    }
                    public var participant: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
                        get
                        set
                      }
                      public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment {
                        get
                        set
                      }
                      public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
                        get
                        set
                      }
                    }
                    public struct Participant : Apollo.GraphQLSelectionSet {
                      public static let possibleTypes: [Swift.String]
                      public static var selections: [Apollo.GraphQLSelection] {
                        get
                      }
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public static func makeBot() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
                      public var __typename: Swift.String {
                        get
                        set
                      }
                      public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.Fragments {
                        get
                        set
                      }
                      public struct Fragments {
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                          get
                          set
                        }
                        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                          get
                          set
                        }
                        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                          get
                          set
                        }
                        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                          get
                          set
                        }
                        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                          get
                          set
                        }
                        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                          get
                          set
                        }
                        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                          get
                          set
                        }
                      }
                      public var asVisitor: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor? {
                        get
                        set
                      }
                      public struct AsVisitor : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                            get
                            set
                          }
                        }
                      }
                      public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount? {
                        get
                        set
                      }
                      public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                            get
                            set
                          }
                        }
                      }
                      public var asIbbuManager: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager? {
                        get
                        set
                      }
                      public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                            get
                            set
                          }
                        }
                      }
                      public var asProfessional: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional? {
                        get
                        set
                      }
                      public struct AsProfessional : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                            get
                            set
                          }
                        }
                      }
                      public var asBot: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot? {
                        get
                        set
                      }
                      public struct AsBot : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                            get
                            set
                          }
                        }
                      }
                      public var asExpert: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert? {
                        get
                        set
                      }
                      public struct AsExpert : Apollo.GraphQLSelectionSet {
                        public static let possibleTypes: [Swift.String]
                        public static var selections: [Apollo.GraphQLSelection] {
                          get
                        }
                        public var resultMap: Apollo.ResultMap {
                          get
                        }
                        public init(unsafeResultMap: Apollo.ResultMap)
                        public init()
                        public var __typename: Swift.String {
                          get
                          set
                        }
                        public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert.Fragments {
                          get
                          set
                        }
                        public struct Fragments {
                          public var resultMap: Apollo.ResultMap {
                            get
                          }
                          public init(unsafeResultMap: Apollo.ResultMap)
                          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                            get
                            set
                          }
                          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                            get
                            set
                          }
                          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                            get
                            set
                          }
                          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                            get
                            set
                          }
                          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                            get
                            set
                          }
                          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                            get
                            set
                          }
                          public var expert: IAdvizeConversationSDK.GraphQL.Expert {
                            get
                            set
                          }
                        }
                      }
                    }
                  }
                  public var asUnsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsUnsupportedSystemMessageAttachment? {
                    get
                    set
                  }
                  public struct AsUnsupportedSystemMessageAttachment : Apollo.GraphQLSelectionSet {
                    public static let possibleTypes: [Swift.String]
                    public static var selections: [Apollo.GraphQLSelection] {
                      get
                    }
                    public var resultMap: Apollo.ResultMap {
                      get
                    }
                    public init(unsafeResultMap: Apollo.ResultMap)
                    public init(_unusedField: Swift.Bool? = nil)
                    public var __typename: Swift.String {
                      get
                      set
                    }
                    public var _unusedField: Swift.Bool? {
                      get
                      set
                    }
                    public var fragments: IAdvizeConversationSDK.GraphQL.FetchConversationMessagesQuery.Data.ConversationsVisitorMessage.Message.Edge.Node.AsSystemMessage.Attachment.AsUnsupportedSystemMessageAttachment.Fragments {
                      get
                      set
                    }
                    public struct Fragments {
                      public var resultMap: Apollo.ResultMap {
                        get
                      }
                      public init(unsafeResultMap: Apollo.ResultMap)
                      public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
                        get
                        set
                      }
                      public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
                        get
                        set
                      }
                      public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment {
                        get
                        set
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkConsentSetMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var consent: Swift.Bool
    public init(consent: Swift.Bool)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkVisitorConsentSet: IAdvizeConversationSDK.GraphQL.SdkConsentSetMutation.Data.SdkVisitorConsentSet? = nil)
      public var sdkVisitorConsentSet: IAdvizeConversationSDK.GraphQL.SdkConsentSetMutation.Data.SdkVisitorConsentSet? {
        get
        set
      }
      public struct SdkVisitorConsentSet : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(consent: Swift.Bool)
        public var __typename: Swift.String {
          get
          set
        }
        public var consent: Swift.Bool {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class SdkConsentQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    public init()
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkVisitorConsent: IAdvizeConversationSDK.GraphQL.SdkConsentQuery.Data.SdkVisitorConsent? = nil)
      public var sdkVisitorConsent: IAdvizeConversationSDK.GraphQL.SdkConsentQuery.Data.SdkVisitorConsent? {
        get
        set
      }
      public struct SdkVisitorConsent : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(consent: Swift.Bool)
        public var __typename: Swift.String {
          get
          set
        }
        public var consent: Swift.Bool {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class SdkMessageSendMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var content: Swift.String
    final public var createdAt: IAdvizeConversationSDK.DateTime
    final public var name: Swift.String?
    final public var language: IAdvizeConversationSDK.GraphQL.Language
    final public var targetingRule: Foundation.UUID
    final public var attachments: [IAdvizeConversationSDK.GraphQL.MessageAttachmentInput]
    public init(content: Swift.String, createdAt: IAdvizeConversationSDK.DateTime, name: Swift.String? = nil, language: IAdvizeConversationSDK.GraphQL.Language, targetingRule: Foundation.UUID, attachments: [IAdvizeConversationSDK.GraphQL.MessageAttachmentInput])
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkVisitorMessageSend: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend? = nil)
      public var sdkVisitorMessageSend: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend? {
        get
        set
      }
      public struct SdkVisitorMessageSend : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(author: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Author, id: Swift.String, createdAt: IAdvizeConversationSDK.DateTime, content: Swift.String, attachments: [IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment])
        public var __typename: Swift.String {
          get
          set
        }
        public var author: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Author {
          get
          set
        }
        public var id: Swift.String {
          get
          set
        }
        public var createdAt: IAdvizeConversationSDK.DateTime {
          get
          set
        }
        public var content: Swift.String {
          get
          set
        }
        public var attachments: [IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment] {
          get
          set
        }
        public struct Author : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String {
            get
            set
          }
        }
        public struct Attachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public static func makeOffer() -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeLink() -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeProduct() -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeQuickReplyMenu() -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeUnsupported() -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeImage(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public static func makeFile(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment
          public var __typename: Swift.String {
            get
            set
          }
          public var asImage: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment.AsImage? {
            get
            set
          }
          public struct AsImage : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Swift.String {
              get
              set
            }
            public var fileName: Swift.String {
              get
              set
            }
            public var mimeType: Swift.String {
              get
              set
            }
          }
          public var asFile: IAdvizeConversationSDK.GraphQL.SdkMessageSendMutation.Data.SdkVisitorMessageSend.Attachment.AsFile? {
            get
            set
          }
          public struct AsFile : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Swift.String {
              get
              set
            }
            public var fileName: Swift.String {
              get
              set
            }
            public var mimeType: Swift.String {
              get
              set
            }
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkMessagesQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var queryDocument: Swift.String {
      get
    }
    public init()
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(messages: [IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message]? = nil)
      public var messages: [IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message]? {
        get
        set
      }
      public struct Message : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(author: IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Author, id: Swift.String, createdAt: IAdvizeConversationSDK.DateTime, content: Swift.String, attachments: [IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment])
        public var __typename: Swift.String {
          get
          set
        }
        public var author: IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Author {
          get
          set
        }
        public var id: Swift.String {
          get
          set
        }
        public var createdAt: IAdvizeConversationSDK.DateTime {
          get
          set
        }
        public var content: Swift.String {
          get
          set
        }
        public var attachments: [IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var messageResource: IAdvizeConversationSDK.GraphQL.MessageResource {
            get
            set
          }
        }
        public struct Author : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String {
            get
            set
          }
        }
        public struct Attachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public static func makeOffer() -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeLink() -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeProduct() -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeQuickReplyMenu() -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeUnsupported() -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeImage(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public static func makeFile(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment
          public var __typename: Swift.String {
            get
            set
          }
          public var asImage: IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment.AsImage? {
            get
            set
          }
          public struct AsImage : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Swift.String {
              get
              set
            }
            public var fileName: Swift.String {
              get
              set
            }
            public var mimeType: Swift.String {
              get
              set
            }
          }
          public var asFile: IAdvizeConversationSDK.GraphQL.SdkMessagesQuery.Data.Message.Attachment.AsFile? {
            get
            set
          }
          public struct AsFile : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Swift.String {
              get
              set
            }
            public var fileName: Swift.String {
              get
              set
            }
            public var mimeType: Swift.String {
              get
              set
            }
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkMobileApplicationQuery : Apollo.GraphQLQuery {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    public init()
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkMobileApplication: IAdvizeConversationSDK.GraphQL.SdkMobileApplicationQuery.Data.SdkMobileApplication? = nil)
      public var sdkMobileApplication: IAdvizeConversationSDK.GraphQL.SdkMobileApplicationQuery.Data.SdkMobileApplication? {
        get
        set
      }
      public struct SdkMobileApplication : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(isEnabled: Swift.Bool)
        public var __typename: Swift.String {
          get
          set
        }
        public var isEnabled: Swift.Bool {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class SdkMobilePushTokenRegisterMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var pushToken: Swift.String
    final public var platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform
    final public var mode: IAdvizeConversationSDK.GraphQL.ApplicationMode?
    public init(pushToken: Swift.String, platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform, mode: IAdvizeConversationSDK.GraphQL.ApplicationMode? = nil)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkMobilePushTokenRegister: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenRegisterMutation.Data.SdkMobilePushTokenRegister? = nil)
      public var sdkMobilePushTokenRegister: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenRegisterMutation.Data.SdkMobilePushTokenRegister? {
        get
        set
      }
      public struct SdkMobilePushTokenRegister : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(appId: Swift.String, externalId: Swift.String? = nil, pushToken: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var appId: Swift.String {
          get
          set
        }
        public var externalId: Swift.String? {
          get
          set
        }
        public var pushToken: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class SdkMobilePushTokenEnableMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var pushToken: Swift.String
    final public var platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform
    public init(pushToken: Swift.String, platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkMobilePushTokenEnable: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenEnableMutation.Data.SdkMobilePushTokenEnable? = nil)
      public var sdkMobilePushTokenEnable: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenEnableMutation.Data.SdkMobilePushTokenEnable? {
        get
        set
      }
      public struct SdkMobilePushTokenEnable : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(appId: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var appId: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class SdkMobilePushTokenDisableMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var pushToken: Swift.String
    final public var platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform
    public init(pushToken: Swift.String, platform: IAdvizeConversationSDK.GraphQL.MobileDevicePlatform)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkMobilePushTokenDisable: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenDisableMutation.Data.SdkMobilePushTokenDisable? = nil)
      public var sdkMobilePushTokenDisable: IAdvizeConversationSDK.GraphQL.SdkMobilePushTokenDisableMutation.Data.SdkMobilePushTokenDisable? {
        get
        set
      }
      public struct SdkMobilePushTokenDisable : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(appId: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var appId: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class TargetingRuleTriggerMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var targetingRuleId: Foundation.UUID
    final public var visitorContext: IAdvizeConversationSDK.GraphQL.VisitorContext
    public init(targetingRuleId: Foundation.UUID, visitorContext: IAdvizeConversationSDK.GraphQL.VisitorContext)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(targetingRuleTrigger: IAdvizeConversationSDK.GraphQL.TargetingRuleTriggerMutation.Data.TargetingRuleTrigger? = nil)
      public var targetingRuleTrigger: IAdvizeConversationSDK.GraphQL.TargetingRuleTriggerMutation.Data.TargetingRuleTrigger? {
        get
        set
      }
      public struct TargetingRuleTrigger : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(targetingRule: IAdvizeConversationSDK.GraphQL.TargetingRuleTriggerMutation.Data.TargetingRuleTrigger.TargetingRule? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var targetingRule: IAdvizeConversationSDK.GraphQL.TargetingRuleTriggerMutation.Data.TargetingRuleTrigger.TargetingRule? {
          get
          set
        }
        public struct TargetingRule : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Foundation.UUID)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Foundation.UUID {
            get
            set
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkTransactionConcludedRegisterMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var input: IAdvizeConversationSDK.GraphQL.SDKTransactionInput
    public init(input: IAdvizeConversationSDK.GraphQL.SDKTransactionInput)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkTransactionConcludedRegister: IAdvizeConversationSDK.GraphQL.SdkTransactionConcludedRegisterMutation.Data.SdkTransactionConcludedRegister? = nil)
      public var sdkTransactionConcludedRegister: IAdvizeConversationSDK.GraphQL.SdkTransactionConcludedRegisterMutation.Data.SdkTransactionConcludedRegister? {
        get
        set
      }
      public struct SdkTransactionConcludedRegister : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(externalTransactionId: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var externalTransactionId: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  final public class VisitorAuthenticateFromCustomerUserIdMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var projectId: IAdvizeConversationSDK.LegacyId
    final public var userId: Swift.String
    public init(projectId: IAdvizeConversationSDK.LegacyId, userId: Swift.String)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(visitorAuthenticateFromCustomerUserId: IAdvizeConversationSDK.GraphQL.VisitorAuthenticateFromCustomerUserIdMutation.Data.VisitorAuthenticateFromCustomerUserId? = nil)
      public var visitorAuthenticateFromCustomerUserId: IAdvizeConversationSDK.GraphQL.VisitorAuthenticateFromCustomerUserIdMutation.Data.VisitorAuthenticateFromCustomerUserId? {
        get
        set
      }
      public struct VisitorAuthenticateFromCustomerUserId : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(visitorSessionToken: IAdvizeConversationSDK.GraphQL.VisitorAuthenticateFromCustomerUserIdMutation.Data.VisitorAuthenticateFromCustomerUserId.VisitorSessionToken)
        public var __typename: Swift.String {
          get
          set
        }
        public var visitorSessionToken: IAdvizeConversationSDK.GraphQL.VisitorAuthenticateFromCustomerUserIdMutation.Data.VisitorAuthenticateFromCustomerUserId.VisitorSessionToken {
          get
          set
        }
        public struct VisitorSessionToken : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(accessToken: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var accessToken: Swift.String {
            get
            set
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkVisitorCustomDataSetMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var datas: [IAdvizeConversationSDK.GraphQL.VisitorCustomDataInput]
    public init(datas: [IAdvizeConversationSDK.GraphQL.VisitorCustomDataInput])
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkVisitorCustomDataSet: [IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet]? = nil)
      public var sdkVisitorCustomDataSet: [IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet]? {
        get
        set
      }
      public struct SdkVisitorCustomDataSet : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeVisitorCustomDataInt(key: Swift.String, intValue: Swift.Int) -> IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet
        public static func makeVisitorCustomDataString(key: Swift.String, stringValue: Swift.String) -> IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet
        public static func makeVisitorCustomDataFloat(key: Swift.String, floatValue: Swift.Double) -> IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet
        public static func makeVisitorCustomDataBoolean(key: Swift.String, booleanValue: Swift.Bool) -> IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet
        public var __typename: Swift.String {
          get
          set
        }
        public var asVisitorCustomDataInt: IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet.AsVisitorCustomDataInt? {
          get
          set
        }
        public struct AsVisitorCustomDataInt : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(key: Swift.String, intValue: Swift.Int)
          public var __typename: Swift.String {
            get
            set
          }
          public var key: Swift.String {
            get
            set
          }
          public var intValue: Swift.Int {
            get
            set
          }
        }
        public var asVisitorCustomDataString: IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet.AsVisitorCustomDataString? {
          get
          set
        }
        public struct AsVisitorCustomDataString : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(key: Swift.String, stringValue: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var key: Swift.String {
            get
            set
          }
          public var stringValue: Swift.String {
            get
            set
          }
        }
        public var asVisitorCustomDataFloat: IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet.AsVisitorCustomDataFloat? {
          get
          set
        }
        public struct AsVisitorCustomDataFloat : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(key: Swift.String, floatValue: Swift.Double)
          public var __typename: Swift.String {
            get
            set
          }
          public var key: Swift.String {
            get
            set
          }
          public var floatValue: Swift.Double {
            get
            set
          }
        }
        public var asVisitorCustomDataBoolean: IAdvizeConversationSDK.GraphQL.SdkVisitorCustomDataSetMutation.Data.SdkVisitorCustomDataSet.AsVisitorCustomDataBoolean? {
          get
          set
        }
        public struct AsVisitorCustomDataBoolean : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(key: Swift.String, booleanValue: Swift.Bool)
          public var __typename: Swift.String {
            get
            set
          }
          public var key: Swift.String {
            get
            set
          }
          public var booleanValue: Swift.Bool {
            get
            set
          }
        }
      }
    }
    @objc deinit
  }
  final public class SdkVisitorTokenRequestMutation : Apollo.GraphQLMutation {
    final public let operationDefinition: Swift.String
    final public let operationName: Swift.String
    final public var vuid: Foundation.UUID?
    public init(vuid: Foundation.UUID? = nil)
    final public var variables: Apollo.GraphQLMap? {
      get
    }
    public struct Data : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(sdkVisitorTokenRequest: IAdvizeConversationSDK.GraphQL.SdkVisitorTokenRequestMutation.Data.SdkVisitorTokenRequest? = nil)
      public var sdkVisitorTokenRequest: IAdvizeConversationSDK.GraphQL.SdkVisitorTokenRequestMutation.Data.SdkVisitorTokenRequest? {
        get
        set
      }
      public struct SdkVisitorTokenRequest : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(visitorToken: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var visitorToken: Swift.String {
          get
          set
        }
      }
    }
    @objc deinit
  }
  public struct ConversationMessage : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public static func makeParticipantConversationMessage(createdAt: IAdvizeConversationSDK.DateTime, messageId: Swift.String, text: Swift.String? = nil, author: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author? = nil, sentAs: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA? = nil, attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage
    public static func makeSystemMessage(createdAt: IAdvizeConversationSDK.DateTime, systemMessageId: Foundation.UUID, attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage
    public var __typename: Swift.String {
      get
      set
    }
    public var createdAt: IAdvizeConversationSDK.DateTime {
      get
      set
    }
    public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.Fragments {
      get
      set
    }
    public struct Fragments {
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage? {
        get
        set
      }
      public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage? {
        get
        set
      }
    }
    public var asParticipantConversationMessage: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage? {
      get
      set
    }
    public struct AsParticipantConversationMessage : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(createdAt: IAdvizeConversationSDK.DateTime, messageId: Swift.String, text: Swift.String? = nil, author: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author? = nil, sentAs: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA? = nil, attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment])
      public var __typename: Swift.String {
        get
        set
      }
      public var createdAt: IAdvizeConversationSDK.DateTime {
        get
        set
      }
      public var messageId: Swift.String {
        get
        set
      }
      public var text: Swift.String? {
        get
        set
      }
      public var author: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author? {
        get
        set
      }
      public var sentAs: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA? {
        get
        set
      }
      public var attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage {
          get
          set
        }
        public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage? {
          get
          set
        }
      }
      public struct Author : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
        public var asVisitor: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsVisitor? {
          get
          set
        }
        public struct AsVisitor : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsVisitor.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsThirdPartyAccount? {
          get
          set
        }
        public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsThirdPartyAccount.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsIbbuManager? {
          get
          set
        }
        public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsIbbuManager.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asProfessional: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsProfessional? {
          get
          set
        }
        public struct AsProfessional : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsProfessional.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asBot: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsBot? {
          get
          set
        }
        public struct AsBot : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsBot.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asExpert: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsExpert? {
          get
          set
        }
        public struct AsExpert : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Author.AsExpert.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert {
              get
              set
            }
          }
        }
      }
      public struct SentA : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
        public var asVisitor: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsVisitor? {
          get
          set
        }
        public struct AsVisitor : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsVisitor.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsThirdPartyAccount? {
          get
          set
        }
        public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsThirdPartyAccount.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsIbbuManager? {
          get
          set
        }
        public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsIbbuManager.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asProfessional: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsProfessional? {
          get
          set
        }
        public struct AsProfessional : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsProfessional.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asBot: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsBot? {
          get
          set
        }
        public struct AsBot : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsBot.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asExpert: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsExpert? {
          get
          set
        }
        public struct AsExpert : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.SentA.AsExpert.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert {
              get
              set
            }
          }
        }
      }
      public struct Attachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeContextualInfosAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeListPickerAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeListPickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeTimePickerAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeTimePickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeAuthenticationRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeFailedAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeSuccessfulAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeApplePayPaymentRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeFailedApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeSuccessfulApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeAppleBusinessChatMessageExtensionAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeConversationBlockedAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeCardAttachment(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeCardBundleAttachment(cards: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeFileAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeFileBundleAttachment(attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeImageAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeLinkAttachment(url: Foundation.URL, title: Swift.String) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeOfferAttachment(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeProductAttachment(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeProductOfferAttachment(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeProductOfferBundleAttachment(productOffers: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeQuickReplyMenuAttachment(message: Swift.String, choices: [Swift.String]) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public static func makeUnsupportedAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public var asCardAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment? {
          get
          set
        }
        public struct AsCardAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action])
          public var __typename: Swift.String {
            get
            set
          }
          public var image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image? {
            get
            set
          }
          public var optionalTitle: Swift.String? {
            get
            set
          }
          public var optionalText: Swift.String? {
            get
            set
          }
          public var style: Swift.String? {
            get
            set
          }
          public var video: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video? {
            get
            set
          }
          public var actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
          public struct Image : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Image.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                get
                set
              }
            }
          }
          public struct Video : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Video.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
                get
                set
              }
            }
          }
          public struct Action : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, title: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var title: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardAttachment.Action.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                get
                set
              }
            }
          }
        }
        public var asCardBundleAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment? {
          get
          set
        }
        public struct AsCardBundleAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(cards: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card])
          public var __typename: Swift.String {
            get
            set
          }
          public var cards: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
          public struct Card : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action])
            public var __typename: Swift.String {
              get
              set
            }
            public var image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? {
              get
              set
            }
            public var optionalTitle: Swift.String? {
              get
              set
            }
            public var optionalText: Swift.String? {
              get
              set
            }
            public var style: Swift.String? {
              get
              set
            }
            public var video: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? {
              get
              set
            }
            public var actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action] {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
                get
                set
              }
            }
            public struct Image : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(url: Foundation.URL, description: Swift.String)
              public var __typename: Swift.String {
                get
                set
              }
              public var url: Foundation.URL {
                get
                set
              }
              public var description: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                  get
                  set
                }
              }
            }
            public struct Video : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(url: Foundation.URL, description: Swift.String)
              public var __typename: Swift.String {
                get
                set
              }
              public var url: Foundation.URL {
                get
                set
              }
              public var description: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
                  get
                  set
                }
              }
            }
            public struct Action : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(url: Foundation.URL, title: Swift.String)
              public var __typename: Swift.String {
                get
                set
              }
              public var url: Foundation.URL {
                get
                set
              }
              public var title: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                  get
                  set
                }
              }
            }
          }
        }
        public var asFileAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileAttachment? {
          get
          set
        }
        public struct AsFileAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
          public var __typename: Swift.String {
            get
            set
          }
          public var fileName: Swift.String {
            get
            set
          }
          public var mimeType: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asFileBundleAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment? {
          get
          set
        }
        public struct AsFileBundleAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment])
          public var __typename: Swift.String {
            get
            set
          }
          public var attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
          public struct Attachment : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
            public var __typename: Swift.String {
              get
              set
            }
            public var fileName: Swift.String {
              get
              set
            }
            public var mimeType: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
                get
                set
              }
            }
          }
        }
        public var asImageAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsImageAttachment? {
          get
          set
        }
        public struct AsImageAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
          public var __typename: Swift.String {
            get
            set
          }
          public var fileName: Swift.String {
            get
            set
          }
          public var mimeType: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsImageAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asLinkAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsLinkAttachment? {
          get
          set
        }
        public struct AsLinkAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, title: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsLinkAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asOfferAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsOfferAttachment? {
          get
          set
        }
        public struct AsOfferAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var imageUrl: Foundation.URL {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsOfferAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asProductAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductAttachment? {
          get
          set
        }
        public struct AsProductAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var productUrl: Foundation.URL {
            get
            set
          }
          public var isAvailable: Swift.Bool {
            get
            set
          }
          public var imageUrl: Foundation.URL {
            get
            set
          }
          public var priceText: Swift.String {
            get
            set
          }
          public var promotionPriceText: Swift.String? {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asProductOfferAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment? {
          get
          set
        }
        public struct AsProductOfferAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action])
          public var __typename: Swift.String {
            get
            set
          }
          public var image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var priceText: Swift.String {
            get
            set
          }
          public var offerPriceText: Swift.String? {
            get
            set
          }
          public var optionalDescription: Swift.String? {
            get
            set
          }
          public var isAvailable: Swift.Bool {
            get
            set
          }
          public var actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
          public struct Image : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                get
                set
              }
            }
          }
          public struct Action : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, title: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var title: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                get
                set
              }
            }
          }
        }
        public var asProductOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment? {
          get
          set
        }
        public struct AsProductOfferBundleAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(productOffers: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer])
          public var __typename: Swift.String {
            get
            set
          }
          public var productOffers: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
          public struct ProductOffer : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action])
            public var __typename: Swift.String {
              get
              set
            }
            public var image: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? {
              get
              set
            }
            public var title: Swift.String {
              get
              set
            }
            public var priceText: Swift.String {
              get
              set
            }
            public var offerPriceText: Swift.String? {
              get
              set
            }
            public var optionalDescription: Swift.String? {
              get
              set
            }
            public var isAvailable: Swift.Bool {
              get
              set
            }
            public var actions: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action] {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
                get
                set
              }
            }
            public struct Image : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(url: Foundation.URL, description: Swift.String)
              public var __typename: Swift.String {
                get
                set
              }
              public var url: Foundation.URL {
                get
                set
              }
              public var description: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                  get
                  set
                }
              }
            }
            public struct Action : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(url: Foundation.URL, title: Swift.String)
              public var __typename: Swift.String {
                get
                set
              }
              public var url: Foundation.URL {
                get
                set
              }
              public var title: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                  get
                  set
                }
              }
            }
          }
        }
        public var asQuickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment? {
          get
          set
        }
        public struct AsQuickReplyMenuAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(message: Swift.String, choices: [Swift.String])
          public var __typename: Swift.String {
            get
            set
          }
          public var message: Swift.String {
            get
            set
          }
          public var choices: [Swift.String] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
              get
              set
            }
          }
        }
        public var asUnsupportedAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsUnsupportedAttachment? {
          get
          set
        }
        public struct AsUnsupportedAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(_unusedField: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var _unusedField: Swift.Bool? {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsParticipantConversationMessage.Attachment.AsUnsupportedAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
              get
              set
            }
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
              get
              set
            }
            public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
              get
              set
            }
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
              get
              set
            }
            public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
              get
              set
            }
            public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
              get
              set
            }
            public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
              get
              set
            }
            public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
              get
              set
            }
            public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
              get
              set
            }
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
              get
              set
            }
            public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
              get
              set
            }
            public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
              get
              set
            }
            public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment {
              get
              set
            }
          }
        }
      }
    }
    public var asSystemMessage: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage? {
      get
      set
    }
    public struct AsSystemMessage : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(createdAt: IAdvizeConversationSDK.DateTime, systemMessageId: Foundation.UUID, attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment])
      public var __typename: Swift.String {
        get
        set
      }
      public var createdAt: IAdvizeConversationSDK.DateTime {
        get
        set
      }
      public var systemMessageId: Foundation.UUID {
        get
        set
      }
      public var attachments: [IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var participantConversationMessage: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage? {
          get
          set
        }
        public var systemMessage: IAdvizeConversationSDK.GraphQL.SystemMessage {
          get
          set
        }
      }
      public struct Attachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeEngagementRuleTriggeredSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeTransferredToUserSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeTransferredToRoutingRuleSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeVisitorBlockedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeVisitorLeftSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeVisitorReturnedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeNavigationChangedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeSupervisorCommentSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeConversationClosedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeConversationPushedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeConversationSnoozedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeConversationReleasedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeVisitorNotificationSettingsRequestedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeVisitorNotificationSettingsSetSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeResumeMessageSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeAutomaticMessageSentSystemAttachment(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public static func makeUnsupportedSystemMessageAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
            get
            set
          }
          public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
            get
            set
          }
          public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
            get
            set
          }
        }
        public var asAutomaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment? {
          get
          set
        }
        public struct AsAutomaticMessageSentSystemAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var text: Swift.String {
            get
            set
          }
          public var participant: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
              get
              set
            }
            public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment {
              get
              set
            }
            public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
              get
              set
            }
          }
          public struct Participant : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
            public var asVisitor: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor? {
              get
              set
            }
            public struct AsVisitor : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                  get
                  set
                }
              }
            }
            public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount? {
              get
              set
            }
            public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                  get
                  set
                }
              }
            }
            public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager? {
              get
              set
            }
            public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                  get
                  set
                }
              }
            }
            public var asProfessional: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional? {
              get
              set
            }
            public struct AsProfessional : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                  get
                  set
                }
              }
            }
            public var asBot: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot? {
              get
              set
            }
            public struct AsBot : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                  get
                  set
                }
              }
            }
            public var asExpert: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert? {
              get
              set
            }
            public struct AsExpert : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init()
              public var __typename: Swift.String {
                get
                set
              }
              public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert.Fragments {
                get
                set
              }
              public struct Fragments {
                public var resultMap: Apollo.ResultMap {
                  get
                }
                public init(unsafeResultMap: Apollo.ResultMap)
                public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                  get
                  set
                }
                public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                  get
                  set
                }
                public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                  get
                  set
                }
                public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                  get
                  set
                }
                public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                  get
                  set
                }
                public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                  get
                  set
                }
                public var expert: IAdvizeConversationSDK.GraphQL.Expert {
                  get
                  set
                }
              }
            }
          }
        }
        public var asUnsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsUnsupportedSystemMessageAttachment? {
          get
          set
        }
        public struct AsUnsupportedSystemMessageAttachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(_unusedField: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var _unusedField: Swift.Bool? {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ConversationMessage.AsSystemMessage.Attachment.AsUnsupportedSystemMessageAttachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
              get
              set
            }
            public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
              get
              set
            }
            public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment {
              get
              set
            }
          }
        }
      }
    }
  }
  public struct ParticipantConversationMessage : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(messageId: Swift.String, text: Swift.String? = nil, author: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author? = nil, sentAs: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA? = nil, createdAt: IAdvizeConversationSDK.DateTime, attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment])
    public var __typename: Swift.String {
      get
      set
    }
    public var messageId: Swift.String {
      get
      set
    }
    public var text: Swift.String? {
      get
      set
    }
    public var author: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author? {
      get
      set
    }
    public var sentAs: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA? {
      get
      set
    }
    public var createdAt: IAdvizeConversationSDK.DateTime {
      get
      set
    }
    public var attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment] {
      get
      set
    }
    public struct Author : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
          get
          set
        }
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
      public var asVisitor: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsVisitor? {
        get
        set
      }
      public struct AsVisitor : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsVisitor.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsThirdPartyAccount? {
        get
        set
      }
      public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsThirdPartyAccount.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsIbbuManager? {
        get
        set
      }
      public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsIbbuManager.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asProfessional: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsProfessional? {
        get
        set
      }
      public struct AsProfessional : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsProfessional.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asBot: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsBot? {
        get
        set
      }
      public struct AsBot : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsBot.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asExpert: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsExpert? {
        get
        set
      }
      public struct AsExpert : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Author.AsExpert.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert {
            get
            set
          }
        }
      }
    }
    public struct SentA : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
          get
          set
        }
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
      public var asVisitor: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsVisitor? {
        get
        set
      }
      public struct AsVisitor : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsVisitor.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsThirdPartyAccount? {
        get
        set
      }
      public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsThirdPartyAccount.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsIbbuManager? {
        get
        set
      }
      public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsIbbuManager.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asProfessional: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsProfessional? {
        get
        set
      }
      public struct AsProfessional : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsProfessional.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asBot: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsBot? {
        get
        set
      }
      public struct AsBot : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsBot.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asExpert: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsExpert? {
        get
        set
      }
      public struct AsExpert : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.SentA.AsExpert.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert {
            get
            set
          }
        }
      }
    }
    public struct Attachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeContextualInfosAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeListPickerAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeListPickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeTimePickerAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeTimePickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeAuthenticationRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeFailedAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeSuccessfulAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeApplePayPaymentRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeFailedApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeSuccessfulApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeAppleBusinessChatMessageExtensionAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeConversationBlockedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeCardAttachment(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeCardBundleAttachment(cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeFileAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeFileBundleAttachment(attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeImageAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeLinkAttachment(url: Foundation.URL, title: Swift.String) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeOfferAttachment(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeProductAttachment(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeProductOfferAttachment(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeProductOfferBundleAttachment(productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeQuickReplyMenuAttachment(message: Swift.String, choices: [Swift.String]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public static func makeUnsupportedAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
          get
          set
        }
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public var asCardAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment? {
        get
        set
      }
      public struct AsCardAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Action])
        public var __typename: Swift.String {
          get
          set
        }
        public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Image? {
          get
          set
        }
        public var optionalTitle: Swift.String? {
          get
          set
        }
        public var optionalText: Swift.String? {
          get
          set
        }
        public var style: Swift.String? {
          get
          set
        }
        public var video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Video? {
          get
          set
        }
        public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Action] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public struct Image : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Image.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
              get
              set
            }
          }
        }
        public struct Video : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Video.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
              get
              set
            }
          }
        }
        public struct Action : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, title: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardAttachment.Action.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
              get
              set
            }
          }
        }
      }
      public var asCardBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment? {
        get
        set
      }
      public struct AsCardBundleAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card])
        public var __typename: Swift.String {
          get
          set
        }
        public var cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public struct Card : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action])
          public var __typename: Swift.String {
            get
            set
          }
          public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image? {
            get
            set
          }
          public var optionalTitle: Swift.String? {
            get
            set
          }
          public var optionalText: Swift.String? {
            get
            set
          }
          public var style: Swift.String? {
            get
            set
          }
          public var video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video? {
            get
            set
          }
          public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
              get
              set
            }
          }
          public struct Image : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Image.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                get
                set
              }
            }
          }
          public struct Video : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Video.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
                get
                set
              }
            }
          }
          public struct Action : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, title: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var title: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsCardBundleAttachment.Card.Action.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                get
                set
              }
            }
          }
        }
      }
      public var asFileAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileAttachment? {
        get
        set
      }
      public struct AsFileAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
        public var __typename: Swift.String {
          get
          set
        }
        public var fileName: Swift.String {
          get
          set
        }
        public var mimeType: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asFileBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment? {
        get
        set
      }
      public struct AsFileBundleAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment])
        public var __typename: Swift.String {
          get
          set
        }
        public var attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public struct Attachment : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
          public var __typename: Swift.String {
            get
            set
          }
          public var fileName: Swift.String {
            get
            set
          }
          public var mimeType: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsFileBundleAttachment.Attachment.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
              get
              set
            }
          }
        }
      }
      public var asImageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsImageAttachment? {
        get
        set
      }
      public struct AsImageAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
        public var __typename: Swift.String {
          get
          set
        }
        public var fileName: Swift.String {
          get
          set
        }
        public var mimeType: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsImageAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asLinkAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsLinkAttachment? {
        get
        set
      }
      public struct AsLinkAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, title: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsLinkAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asOfferAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsOfferAttachment? {
        get
        set
      }
      public struct AsOfferAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var imageUrl: Foundation.URL {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsOfferAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asProductAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductAttachment? {
        get
        set
      }
      public struct AsProductAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var productUrl: Foundation.URL {
          get
          set
        }
        public var isAvailable: Swift.Bool {
          get
          set
        }
        public var imageUrl: Foundation.URL {
          get
          set
        }
        public var priceText: Swift.String {
          get
          set
        }
        public var promotionPriceText: Swift.String? {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asProductOfferAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment? {
        get
        set
      }
      public struct AsProductOfferAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action])
        public var __typename: Swift.String {
          get
          set
        }
        public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image? {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var priceText: Swift.String {
          get
          set
        }
        public var offerPriceText: Swift.String? {
          get
          set
        }
        public var optionalDescription: Swift.String? {
          get
          set
        }
        public var isAvailable: Swift.Bool {
          get
          set
        }
        public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public struct Image : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Image.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
              get
              set
            }
          }
        }
        public struct Action : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, title: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferAttachment.Action.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
              get
              set
            }
          }
        }
      }
      public var asProductOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment? {
        get
        set
      }
      public struct AsProductOfferBundleAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer])
        public var __typename: Swift.String {
          get
          set
        }
        public var productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
        public struct ProductOffer : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action])
          public var __typename: Swift.String {
            get
            set
          }
          public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image? {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var priceText: Swift.String {
            get
            set
          }
          public var offerPriceText: Swift.String? {
            get
            set
          }
          public var optionalDescription: Swift.String? {
            get
            set
          }
          public var isAvailable: Swift.Bool {
            get
            set
          }
          public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action] {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
              get
              set
            }
          }
          public struct Image : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, description: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var description: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Image.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
                get
                set
              }
            }
          }
          public struct Action : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(url: Foundation.URL, title: Swift.String)
            public var __typename: Swift.String {
              get
              set
            }
            public var url: Foundation.URL {
              get
              set
            }
            public var title: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsProductOfferBundleAttachment.ProductOffer.Action.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
                get
                set
              }
            }
          }
        }
      }
      public var asQuickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment? {
        get
        set
      }
      public struct AsQuickReplyMenuAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(message: Swift.String, choices: [Swift.String])
        public var __typename: Swift.String {
          get
          set
        }
        public var message: Swift.String {
          get
          set
        }
        public var choices: [Swift.String] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsQuickReplyMenuAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
            get
            set
          }
        }
      }
      public var asUnsupportedAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsUnsupportedAttachment? {
        get
        set
      }
      public struct AsUnsupportedAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(_unusedField: Swift.Bool? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var _unusedField: Swift.Bool? {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessage.Attachment.AsUnsupportedAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var participantConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment {
            get
            set
          }
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
            get
            set
          }
          public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
            get
            set
          }
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
            get
            set
          }
          public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
            get
            set
          }
          public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
            get
            set
          }
          public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
            get
            set
          }
          public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
            get
            set
          }
          public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
            get
            set
          }
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
            get
            set
          }
          public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
            get
            set
          }
          public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
            get
            set
          }
          public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment {
            get
            set
          }
        }
      }
    }
  }
  public struct SystemMessage : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(systemMessageId: Foundation.UUID, createdAt: IAdvizeConversationSDK.DateTime, attachments: [IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment])
    public var __typename: Swift.String {
      get
      set
    }
    public var systemMessageId: Foundation.UUID {
      get
      set
    }
    public var createdAt: IAdvizeConversationSDK.DateTime {
      get
      set
    }
    public var attachments: [IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment] {
      get
      set
    }
    public struct Attachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeEngagementRuleTriggeredSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeTransferredToUserSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeTransferredToRoutingRuleSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeVisitorBlockedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeVisitorLeftSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeVisitorReturnedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeNavigationChangedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeSupervisorCommentSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeConversationClosedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeConversationPushedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeConversationSnoozedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeConversationReleasedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeVisitorNotificationSettingsRequestedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeVisitorNotificationSettingsSetSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeResumeMessageSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeAutomaticMessageSentSystemAttachment(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil) -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public static func makeUnsupportedSystemMessageAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
          get
          set
        }
        public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
          get
          set
        }
        public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
          get
          set
        }
      }
      public var asAutomaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment? {
        get
        set
      }
      public struct AsAutomaticMessageSentSystemAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var text: Swift.String {
          get
          set
        }
        public var participant: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant? {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
            get
            set
          }
          public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment {
            get
            set
          }
          public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
            get
            set
          }
        }
        public struct Participant : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public static func makeBot() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
          public var asVisitor: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor? {
            get
            set
          }
          public struct AsVisitor : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
          }
          public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount? {
            get
            set
          }
          public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
          }
          public var asIbbuManager: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager? {
            get
            set
          }
          public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
          }
          public var asProfessional: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional? {
            get
            set
          }
          public struct AsProfessional : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
          }
          public var asBot: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot? {
            get
            set
          }
          public struct AsBot : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
                get
                set
              }
            }
          }
          public var asExpert: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert? {
            get
            set
          }
          public struct AsExpert : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init()
            public var __typename: Swift.String {
              get
              set
            }
            public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert.Fragments {
              get
              set
            }
            public struct Fragments {
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
                get
                set
              }
              public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
                get
                set
              }
              public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
                get
                set
              }
              public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
                get
                set
              }
              public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
                get
                set
              }
              public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
                get
                set
              }
              public var expert: IAdvizeConversationSDK.GraphQL.Expert {
                get
                set
              }
            }
          }
        }
      }
      public var asUnsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsUnsupportedSystemMessageAttachment? {
        get
        set
      }
      public struct AsUnsupportedSystemMessageAttachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(_unusedField: Swift.Bool? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var _unusedField: Swift.Bool? {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.SystemMessage.Attachment.AsUnsupportedSystemMessageAttachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var systemConversationMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment {
            get
            set
          }
          public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
            get
            set
          }
          public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment {
            get
            set
          }
        }
      }
    }
  }
  public struct ParticipantConversationMessageAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public static func makeContextualInfosAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeListPickerAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeListPickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeTimePickerAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeTimePickerResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeAuthenticationRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeFailedAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeSuccessfulAuthenticationResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeApplePayPaymentRequestedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeFailedApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeSuccessfulApplePayPaymentResponseAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeAppleBusinessChatMessageExtensionAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeConversationBlockedAttachment() -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeCardAttachment(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeCardBundleAttachment(cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeFileAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeFileBundleAttachment(attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment.Attachment]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeImageAttachment(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeLinkAttachment(url: Foundation.URL, title: Swift.String) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeOfferAttachment(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeProductAttachment(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeProductOfferAttachment(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Action]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeProductOfferBundleAttachment(productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeQuickReplyMenuAttachment(message: Swift.String, choices: [Swift.String]) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public static func makeUnsupportedAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment
    public var __typename: Swift.String {
      get
      set
    }
    public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.Fragments {
      get
      set
    }
    public struct Fragments {
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
        get
        set
      }
      public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
        get
        set
      }
      public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
        get
        set
      }
      public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
        get
        set
      }
      public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
        get
        set
      }
      public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
        get
        set
      }
      public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
        get
        set
      }
      public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
        get
        set
      }
      public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
        get
        set
      }
      public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
        get
        set
      }
      public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
        get
        set
      }
      public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
        get
        set
      }
    }
    public var asCardAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment? {
      get
      set
    }
    public struct AsCardAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Action])
      public var __typename: Swift.String {
        get
        set
      }
      public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Image? {
        get
        set
      }
      public var optionalTitle: Swift.String? {
        get
        set
      }
      public var optionalText: Swift.String? {
        get
        set
      }
      public var style: Swift.String? {
        get
        set
      }
      public var video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Video? {
        get
        set
      }
      public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Action] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public struct Image : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Image.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
            get
            set
          }
        }
      }
      public struct Video : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Video.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
            get
            set
          }
        }
      }
      public struct Action : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, title: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardAttachment.Action.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
            get
            set
          }
        }
      }
    }
    public var asCardBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment? {
      get
      set
    }
    public struct AsCardBundleAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card])
      public var __typename: Swift.String {
        get
        set
      }
      public var cards: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public struct Card : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Action])
        public var __typename: Swift.String {
          get
          set
        }
        public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Image? {
          get
          set
        }
        public var optionalTitle: Swift.String? {
          get
          set
        }
        public var optionalText: Swift.String? {
          get
          set
        }
        public var style: Swift.String? {
          get
          set
        }
        public var video: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Video? {
          get
          set
        }
        public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Action] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
            get
            set
          }
        }
        public struct Image : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Image.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
              get
              set
            }
          }
        }
        public struct Video : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Video.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
              get
              set
            }
          }
        }
        public struct Action : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, title: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsCardBundleAttachment.Card.Action.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
              get
              set
            }
          }
        }
      }
    }
    public var asFileAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileAttachment? {
      get
      set
    }
    public struct AsFileAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
      public var __typename: Swift.String {
        get
        set
      }
      public var fileName: Swift.String {
        get
        set
      }
      public var mimeType: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asFileBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment? {
      get
      set
    }
    public struct AsFileBundleAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment.Attachment])
      public var __typename: Swift.String {
        get
        set
      }
      public var attachments: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment.Attachment] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public struct Attachment : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
        public var __typename: Swift.String {
          get
          set
        }
        public var fileName: Swift.String {
          get
          set
        }
        public var mimeType: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsFileBundleAttachment.Attachment.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
            get
            set
          }
        }
      }
    }
    public var asImageAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsImageAttachment? {
      get
      set
    }
    public struct AsImageAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
      public var __typename: Swift.String {
        get
        set
      }
      public var fileName: Swift.String {
        get
        set
      }
      public var mimeType: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsImageAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asLinkAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsLinkAttachment? {
      get
      set
    }
    public struct AsLinkAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, title: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsLinkAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asOfferAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsOfferAttachment? {
      get
      set
    }
    public struct AsOfferAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var imageUrl: Foundation.URL {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var description: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsOfferAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asProductAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductAttachment? {
      get
      set
    }
    public struct AsProductAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var productUrl: Foundation.URL {
        get
        set
      }
      public var isAvailable: Swift.Bool {
        get
        set
      }
      public var imageUrl: Foundation.URL {
        get
        set
      }
      public var priceText: Swift.String {
        get
        set
      }
      public var promotionPriceText: Swift.String? {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asProductOfferAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment? {
      get
      set
    }
    public struct AsProductOfferAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Action])
      public var __typename: Swift.String {
        get
        set
      }
      public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Image? {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var priceText: Swift.String {
        get
        set
      }
      public var offerPriceText: Swift.String? {
        get
        set
      }
      public var optionalDescription: Swift.String? {
        get
        set
      }
      public var isAvailable: Swift.Bool {
        get
        set
      }
      public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Action] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public struct Image : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Image.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
            get
            set
          }
        }
      }
      public struct Action : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, title: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferAttachment.Action.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
            get
            set
          }
        }
      }
    }
    public var asProductOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment? {
      get
      set
    }
    public struct AsProductOfferBundleAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer])
      public var __typename: Swift.String {
        get
        set
      }
      public var productOffers: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
      public struct ProductOffer : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Action])
        public var __typename: Swift.String {
          get
          set
        }
        public var image: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Image? {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var priceText: Swift.String {
          get
          set
        }
        public var offerPriceText: Swift.String? {
          get
          set
        }
        public var optionalDescription: Swift.String? {
          get
          set
        }
        public var isAvailable: Swift.Bool {
          get
          set
        }
        public var actions: [IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Action] {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
            get
            set
          }
        }
        public struct Image : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, description: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var description: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Image.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
              get
              set
            }
          }
        }
        public struct Action : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(url: Foundation.URL, title: Swift.String)
          public var __typename: Swift.String {
            get
            set
          }
          public var url: Foundation.URL {
            get
            set
          }
          public var title: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsProductOfferBundleAttachment.ProductOffer.Action.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
              get
              set
            }
          }
        }
      }
    }
    public var asQuickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsQuickReplyMenuAttachment? {
      get
      set
    }
    public struct AsQuickReplyMenuAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(message: Swift.String, choices: [Swift.String])
      public var __typename: Swift.String {
        get
        set
      }
      public var message: Swift.String {
        get
        set
      }
      public var choices: [Swift.String] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsQuickReplyMenuAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment? {
          get
          set
        }
      }
    }
    public var asUnsupportedAttachment: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsUnsupportedAttachment? {
      get
      set
    }
    public struct AsUnsupportedAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(_unusedField: Swift.Bool? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var _unusedField: Swift.Bool? {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ParticipantConversationMessageAttachment.AsUnsupportedAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment? {
          get
          set
        }
        public var cardBundleAttachment: IAdvizeConversationSDK.GraphQL.CardBundleAttachment? {
          get
          set
        }
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment? {
          get
          set
        }
        public var fileBundleAttachment: IAdvizeConversationSDK.GraphQL.FileBundleAttachment? {
          get
          set
        }
        public var imageAttachment: IAdvizeConversationSDK.GraphQL.ImageAttachment? {
          get
          set
        }
        public var linkAttachment: IAdvizeConversationSDK.GraphQL.LinkAttachment? {
          get
          set
        }
        public var offerAttachment: IAdvizeConversationSDK.GraphQL.OfferAttachment? {
          get
          set
        }
        public var productAttachment: IAdvizeConversationSDK.GraphQL.ProductAttachment? {
          get
          set
        }
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment? {
          get
          set
        }
        public var productOfferBundleAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment? {
          get
          set
        }
        public var quickReplyMenuAttachment: IAdvizeConversationSDK.GraphQL.QuickReplyMenuAttachment? {
          get
          set
        }
        public var unsupportedAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedAttachment {
          get
          set
        }
      }
    }
  }
  public struct SystemConversationMessageAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public static func makeEngagementRuleTriggeredSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeTransferredToUserSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeTransferredToRoutingRuleSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeVisitorBlockedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeVisitorLeftSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeVisitorReturnedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeNavigationChangedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeSupervisorCommentSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeConversationClosedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeConversationPushedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeConversationSnoozedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeConversationReleasedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeVisitorNotificationSettingsRequestedSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeVisitorNotificationSettingsSetSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeResumeMessageSentSystemAttachment() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeAutomaticMessageSentSystemAttachment(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil) -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public static func makeUnsupportedSystemMessageAttachment(_unusedField: Swift.Bool? = nil) -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment
    public var __typename: Swift.String {
      get
      set
    }
    public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.Fragments {
      get
      set
    }
    public struct Fragments {
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
        get
        set
      }
      public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
        get
        set
      }
    }
    public var asAutomaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment? {
      get
      set
    }
    public struct AsAutomaticMessageSentSystemAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var text: Swift.String {
        get
        set
      }
      public var participant: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant? {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment {
          get
          set
        }
        public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment? {
          get
          set
        }
      }
      public struct Participant : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public static func makeBot() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
        public var asVisitor: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor? {
          get
          set
        }
        public struct AsVisitor : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsVisitor.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount? {
          get
          set
        }
        public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asIbbuManager: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager? {
          get
          set
        }
        public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsIbbuManager.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asProfessional: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional? {
          get
          set
        }
        public struct AsProfessional : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsProfessional.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asBot: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot? {
          get
          set
        }
        public struct AsBot : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsBot.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
              get
              set
            }
          }
        }
        public var asExpert: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert? {
          get
          set
        }
        public struct AsExpert : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init()
          public var __typename: Swift.String {
            get
            set
          }
          public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsAutomaticMessageSentSystemAttachment.Participant.AsExpert.Fragments {
            get
            set
          }
          public struct Fragments {
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
              get
              set
            }
            public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
              get
              set
            }
            public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
              get
              set
            }
            public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
              get
              set
            }
            public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
              get
              set
            }
            public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
              get
              set
            }
            public var expert: IAdvizeConversationSDK.GraphQL.Expert {
              get
              set
            }
          }
        }
      }
    }
    public var asUnsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsUnsupportedSystemMessageAttachment? {
      get
      set
    }
    public struct AsUnsupportedSystemMessageAttachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(_unusedField: Swift.Bool? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var _unusedField: Swift.Bool? {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.SystemConversationMessageAttachment.AsUnsupportedSystemMessageAttachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var automaticMessageSentSystemAttachment: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment? {
          get
          set
        }
        public var unsupportedSystemMessageAttachment: IAdvizeConversationSDK.GraphQL.UnsupportedSystemMessageAttachment {
          get
          set
        }
      }
    }
  }
  public struct CardAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(image: IAdvizeConversationSDK.GraphQL.CardAttachment.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.CardAttachment.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.CardAttachment.Action])
    public var __typename: Swift.String {
      get
      set
    }
    public var image: IAdvizeConversationSDK.GraphQL.CardAttachment.Image? {
      get
      set
    }
    public var optionalTitle: Swift.String? {
      get
      set
    }
    public var optionalText: Swift.String? {
      get
      set
    }
    public var style: Swift.String? {
      get
      set
    }
    public var video: IAdvizeConversationSDK.GraphQL.CardAttachment.Video? {
      get
      set
    }
    public var actions: [IAdvizeConversationSDK.GraphQL.CardAttachment.Action] {
      get
      set
    }
    public struct Image : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, description: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var description: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.CardAttachment.Image.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
          get
          set
        }
      }
    }
    public struct Video : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, description: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var description: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.CardAttachment.Video.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
          get
          set
        }
      }
    }
    public struct Action : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, title: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.CardAttachment.Action.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
          get
          set
        }
      }
    }
  }
  public struct CardBundleAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(cards: [IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card])
    public var __typename: Swift.String {
      get
      set
    }
    public var cards: [IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card] {
      get
      set
    }
    public struct Card : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(image: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Image? = nil, optionalTitle: Swift.String? = nil, optionalText: Swift.String? = nil, style: Swift.String? = nil, video: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Video? = nil, actions: [IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Action])
      public var __typename: Swift.String {
        get
        set
      }
      public var image: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Image? {
        get
        set
      }
      public var optionalTitle: Swift.String? {
        get
        set
      }
      public var optionalText: Swift.String? {
        get
        set
      }
      public var style: Swift.String? {
        get
        set
      }
      public var video: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Video? {
        get
        set
      }
      public var actions: [IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Action] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var cardAttachment: IAdvizeConversationSDK.GraphQL.CardAttachment {
          get
          set
        }
      }
      public struct Image : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Image.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
            get
            set
          }
        }
      }
      public struct Video : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Video.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var videoAttachment: IAdvizeConversationSDK.GraphQL.VideoAttachment {
            get
            set
          }
        }
      }
      public struct Action : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, title: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.CardBundleAttachment.Card.Action.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
            get
            set
          }
        }
      }
    }
  }
  public struct FileAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
    public var __typename: Swift.String {
      get
      set
    }
    public var fileName: Swift.String {
      get
      set
    }
    public var mimeType: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
  }
  public struct FileBundleAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(attachments: [IAdvizeConversationSDK.GraphQL.FileBundleAttachment.Attachment])
    public var __typename: Swift.String {
      get
      set
    }
    public var attachments: [IAdvizeConversationSDK.GraphQL.FileBundleAttachment.Attachment] {
      get
      set
    }
    public struct Attachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
      public var __typename: Swift.String {
        get
        set
      }
      public var fileName: Swift.String {
        get
        set
      }
      public var mimeType: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.FileBundleAttachment.Attachment.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var fileAttachment: IAdvizeConversationSDK.GraphQL.FileAttachment {
          get
          set
        }
      }
    }
  }
  public struct ImageAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(fileName: Swift.String, mimeType: Swift.String, url: Foundation.URL)
    public var __typename: Swift.String {
      get
      set
    }
    public var fileName: Swift.String {
      get
      set
    }
    public var mimeType: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
  }
  public struct LinkAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(url: Foundation.URL, title: Swift.String)
    public var __typename: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
  }
  public struct OfferAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(title: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, description: Swift.String)
    public var __typename: Swift.String {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
    public var imageUrl: Foundation.URL {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
    public var description: Swift.String {
      get
      set
    }
  }
  public struct ProductAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(title: Swift.String, productUrl: Foundation.URL, isAvailable: Swift.Bool, imageUrl: Foundation.URL, priceText: Swift.String, promotionPriceText: Swift.String? = nil)
    public var __typename: Swift.String {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
    public var productUrl: Foundation.URL {
      get
      set
    }
    public var isAvailable: Swift.Bool {
      get
      set
    }
    public var imageUrl: Foundation.URL {
      get
      set
    }
    public var priceText: Swift.String {
      get
      set
    }
    public var promotionPriceText: Swift.String? {
      get
      set
    }
  }
  public struct ProductOfferAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(image: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Action])
    public var __typename: Swift.String {
      get
      set
    }
    public var image: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Image? {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
    public var priceText: Swift.String {
      get
      set
    }
    public var offerPriceText: Swift.String? {
      get
      set
    }
    public var optionalDescription: Swift.String? {
      get
      set
    }
    public var isAvailable: Swift.Bool {
      get
      set
    }
    public var actions: [IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Action] {
      get
      set
    }
    public struct Image : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, description: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var description: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Image.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
          get
          set
        }
      }
    }
    public struct Action : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(url: Foundation.URL, title: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var url: Foundation.URL {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment.Action.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
          get
          set
        }
      }
    }
  }
  public struct ProductOfferBundleAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(productOffers: [IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer])
    public var __typename: Swift.String {
      get
      set
    }
    public var productOffers: [IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer] {
      get
      set
    }
    public struct ProductOffer : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(image: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Image? = nil, title: Swift.String, priceText: Swift.String, offerPriceText: Swift.String? = nil, optionalDescription: Swift.String? = nil, isAvailable: Swift.Bool, actions: [IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Action])
      public var __typename: Swift.String {
        get
        set
      }
      public var image: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Image? {
        get
        set
      }
      public var title: Swift.String {
        get
        set
      }
      public var priceText: Swift.String {
        get
        set
      }
      public var offerPriceText: Swift.String? {
        get
        set
      }
      public var optionalDescription: Swift.String? {
        get
        set
      }
      public var isAvailable: Swift.Bool {
        get
        set
      }
      public var actions: [IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Action] {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var productOfferAttachment: IAdvizeConversationSDK.GraphQL.ProductOfferAttachment {
          get
          set
        }
      }
      public struct Image : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, description: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var description: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Image.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentImageLink: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentImageLink {
            get
            set
          }
        }
      }
      public struct Action : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Foundation.URL, title: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Foundation.URL {
          get
          set
        }
        public var title: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.ProductOfferBundleAttachment.ProductOffer.Action.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationMessageAttachmentLinkAction: IAdvizeConversationSDK.GraphQL.ConversationMessageAttachmentLinkAction {
            get
            set
          }
        }
      }
    }
  }
  public struct QuickReplyMenuAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(message: Swift.String, choices: [Swift.String])
    public var __typename: Swift.String {
      get
      set
    }
    public var message: Swift.String {
      get
      set
    }
    public var choices: [Swift.String] {
      get
      set
    }
  }
  public struct UnsupportedAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(_unusedField: Swift.Bool? = nil)
    public var __typename: Swift.String {
      get
      set
    }
    public var _unusedField: Swift.Bool? {
      get
      set
    }
  }
  public struct VideoAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(url: Foundation.URL, description: Swift.String)
    public var __typename: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
    public var description: Swift.String {
      get
      set
    }
  }
  public struct ConversationMessageAttachmentImageLink : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(url: Foundation.URL, description: Swift.String)
    public var __typename: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
    public var description: Swift.String {
      get
      set
    }
  }
  public struct ConversationMessageAttachmentLinkAction : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(url: Foundation.URL, title: Swift.String)
    public var __typename: Swift.String {
      get
      set
    }
    public var url: Foundation.URL {
      get
      set
    }
    public var title: Swift.String {
      get
      set
    }
  }
  public struct AutomaticMessageSentSystemAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(text: Swift.String, participant: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant? = nil)
    public var __typename: Swift.String {
      get
      set
    }
    public var text: Swift.String {
      get
      set
    }
    public var participant: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant? {
      get
      set
    }
    public struct Participant : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public static func makeBot() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
          get
          set
        }
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
      public var asVisitor: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsVisitor? {
        get
        set
      }
      public struct AsVisitor : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsVisitor.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount? {
        get
        set
      }
      public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsThirdPartyAccount.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asIbbuManager: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsIbbuManager? {
        get
        set
      }
      public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsIbbuManager.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asProfessional: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsProfessional? {
        get
        set
      }
      public struct AsProfessional : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsProfessional.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asBot: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsBot? {
        get
        set
      }
      public struct AsBot : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsBot.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
            get
            set
          }
        }
      }
      public var asExpert: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsExpert? {
        get
        set
      }
      public struct AsExpert : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init()
        public var __typename: Swift.String {
          get
          set
        }
        public var fragments: IAdvizeConversationSDK.GraphQL.AutomaticMessageSentSystemAttachment.Participant.AsExpert.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var conversationParticipant: IAdvizeConversationSDK.GraphQL.ConversationParticipant {
            get
            set
          }
          public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
            get
            set
          }
          public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
            get
            set
          }
          public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
            get
            set
          }
          public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
            get
            set
          }
          public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
            get
            set
          }
          public var expert: IAdvizeConversationSDK.GraphQL.Expert {
            get
            set
          }
        }
      }
    }
  }
  public struct UnsupportedSystemMessageAttachment : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(_unusedField: Swift.Bool? = nil)
    public var __typename: Swift.String {
      get
      set
    }
    public var _unusedField: Swift.Bool? {
      get
      set
    }
  }
  public struct ConversationParticipant : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public static func makeVisitor() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public static func makeThirdPartyAccount() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public static func makeIbbuManager() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public static func makeProfessional() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public static func makeBot() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public static func makeExpert() -> IAdvizeConversationSDK.GraphQL.ConversationParticipant
    public var __typename: Swift.String {
      get
      set
    }
    public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.Fragments {
      get
      set
    }
    public struct Fragments {
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
        get
        set
      }
      public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
        get
        set
      }
      public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
        get
        set
      }
      public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
        get
        set
      }
      public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
        get
        set
      }
      public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
        get
        set
      }
    }
    public var asVisitor: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsVisitor? {
      get
      set
    }
    public struct AsVisitor : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsVisitor.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
    }
    public var asThirdPartyAccount: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsThirdPartyAccount? {
      get
      set
    }
    public struct AsThirdPartyAccount : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsThirdPartyAccount.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
    }
    public var asIbbuManager: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsIbbuManager? {
      get
      set
    }
    public struct AsIbbuManager : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsIbbuManager.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
    }
    public var asProfessional: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsProfessional? {
      get
      set
    }
    public struct AsProfessional : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsProfessional.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
    }
    public var asBot: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsBot? {
      get
      set
    }
    public struct AsBot : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsBot.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert? {
          get
          set
        }
      }
    }
    public var asExpert: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsExpert? {
      get
      set
    }
    public struct AsExpert : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init()
      public var __typename: Swift.String {
        get
        set
      }
      public var fragments: IAdvizeConversationSDK.GraphQL.ConversationParticipant.AsExpert.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var visitor: IAdvizeConversationSDK.GraphQL.Visitor? {
          get
          set
        }
        public var thirdPartyAccount: IAdvizeConversationSDK.GraphQL.ThirdPartyAccount? {
          get
          set
        }
        public var ibbuManager: IAdvizeConversationSDK.GraphQL.IbbuManager? {
          get
          set
        }
        public var professional: IAdvizeConversationSDK.GraphQL.Professional? {
          get
          set
        }
        public var bot: IAdvizeConversationSDK.GraphQL.Bot? {
          get
          set
        }
        public var expert: IAdvizeConversationSDK.GraphQL.Expert {
          get
          set
        }
      }
    }
  }
  public struct Bot : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct Expert : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct IbbuManager : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct Professional : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct ThirdPartyAccount : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct Visitor : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init()
    public var __typename: Swift.String {
      get
      set
    }
  }
  public struct MessageResource : Apollo.GraphQLFragment {
    public static let fragmentDefinition: Swift.String
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(author: IAdvizeConversationSDK.GraphQL.MessageResource.Author, id: Swift.String, createdAt: IAdvizeConversationSDK.DateTime, content: Swift.String, attachments: [IAdvizeConversationSDK.GraphQL.MessageResource.Attachment])
    public var __typename: Swift.String {
      get
      set
    }
    public var author: IAdvizeConversationSDK.GraphQL.MessageResource.Author {
      get
      set
    }
    public var id: Swift.String {
      get
      set
    }
    public var createdAt: IAdvizeConversationSDK.DateTime {
      get
      set
    }
    public var content: Swift.String {
      get
      set
    }
    public var attachments: [IAdvizeConversationSDK.GraphQL.MessageResource.Attachment] {
      get
      set
    }
    public struct Author : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Swift.String)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Swift.String {
        get
        set
      }
    }
    public struct Attachment : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public static func makeOffer() -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeLink() -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeProduct() -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeQuickReplyMenu() -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeUnsupported() -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeImage(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public static func makeFile(url: Swift.String, fileName: Swift.String, mimeType: Swift.String) -> IAdvizeConversationSDK.GraphQL.MessageResource.Attachment
      public var __typename: Swift.String {
        get
        set
      }
      public var asImage: IAdvizeConversationSDK.GraphQL.MessageResource.Attachment.AsImage? {
        get
        set
      }
      public struct AsImage : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Swift.String {
          get
          set
        }
        public var fileName: Swift.String {
          get
          set
        }
        public var mimeType: Swift.String {
          get
          set
        }
      }
      public var asFile: IAdvizeConversationSDK.GraphQL.MessageResource.Attachment.AsFile? {
        get
        set
      }
      public struct AsFile : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(url: Swift.String, fileName: Swift.String, mimeType: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var url: Swift.String {
          get
          set
        }
        public var fileName: Swift.String {
          get
          set
        }
        public var mimeType: Swift.String {
          get
          set
        }
      }
    }
  }
}
@_hasMissingDesignatedInitializers @objc final public class ConversationController : ObjectiveC.NSObject {
  @objc weak final public var delegate: IAdvizeConversationSDK.ConversationControllerDelegate?
  @objc final public var hasOngoingConversation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public func presentConversationViewModal(animated: Swift.Bool = true, presentingViewController: UIKit.UIViewController? = nil, completion: (() -> Swift.Void)? = nil)
  @objc final public func dismissConversationViewModal(animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc final public func isConversationViewPresented() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension ConversationController : IAdvizeConversationSDK.TargetingControllerDelegate {
  @objc final public func activeTargetingRuleAvailabilityDidUpdate(isActiveTargetingRuleAvailable: Swift.Bool)
}
@objc(AuthenticationOption) public class ObjcAuthenticationOption : ObjectiveC.NSObject {
  @objc public func initWithAnonymous()
  @available(swift, obsoleted: 1.0)
  @objc public init(simple userId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Transaction {
  @available(swift, obsoleted: 1.0)
  @objc convenience dynamic public init(externalTransactionId: Swift.String, date: Foundation.Date, amount: Swift.Double, currency: IAdvizeConversationSDK.ObjcGraphQLCurrency)
}
@objc public protocol ConversationControllerDelegate {
  @objc optional func didReceiveNewMessage(content: Swift.String)
  @objc func ongoingConversationStatusDidChange(hasOngoingConversation: Swift.Bool)
  @objc optional func conversationController(_ controller: IAdvizeConversationSDK.ConversationController, shouldOpen url: Foundation.URL) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class CustomAlertController : UIKit.UIAlertController {
  @objc override dynamic open func addAction(_ action: UIKit.UIAlertAction)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension URL {
  public var containsImage: Swift.Bool {
    get
  }
}
public enum AuthenticationOption {
  case anonymous
  case simple(userId: Swift.String)
}
extension Double {
  public func parseTimeIntervalString(_ timeInterval: Swift.String) -> Foundation.TimeInterval!
}
@objc(GraphQLCurrency) public enum ObjcGraphQLCurrency : Swift.Int {
  case adp
  case aed
  case afa
  case afn
  case all
  case amd
  case ang
  case aoa
  case ars
  case ats
  case aud
  case awg
  case aym
  case azm
  case azn
  case bam
  case bbd
  case bdt
  case bef
  case bgl
  case bgn
  case bhd
  case bif
  case bmd
  case bnd
  case bob
  case bov
  case brl
  case bsd
  case btn
  case bwp
  case byb
  case byn
  case byr
  case bzd
  case cad
  case cdf
  case che
  case chf
  case chw
  case clf
  case clp
  case cny
  case cop
  case cou
  case crc
  case csd
  case cuc
  case cup
  case cve
  case cyp
  case czk
  case dem
  case djf
  case dkk
  case dop
  case dzd
  case eek
  case egp
  case ern
  case esp
  case etb
  case eur
  case fim
  case fjd
  case fkp
  case frf
  case gbp
  case gel
  case ghc
  case ghs
  case gip
  case gmd
  case gnf
  case grd
  case gtq
  case gwp
  case gyd
  case hkd
  case hnl
  case hrk
  case htg
  case huf
  case idr
  case iep
  case ils
  case inr
  case iqd
  case irr
  case isk
  case itl
  case jmd
  case jod
  case jpy
  case kes
  case kgs
  case khr
  case kmf
  case kpw
  case krw
  case kwd
  case kyd
  case kzt
  case lak
  case lbp
  case lkr
  case lrd
  case lsl
  case ltl
  case luf
  case lvl
  case lyd
  case mad
  case mdl
  case mga
  case mgf
  case mkd
  case mmk
  case mnt
  case mop
  case mro
  case mru
  case mtl
  case mur
  case mvr
  case mwk
  case mxn
  case mxv
  case myr
  case mzm
  case mzn
  case nad
  case ngn
  case nio
  case nlg
  case nok
  case npr
  case nzd
  case omr
  case pab
  case pen
  case pgk
  case php
  case pkr
  case pln
  case pte
  case pyg
  case qar
  case rol
  case ron
  case rsd
  case rub
  case rur
  case rwf
  case sar
  case sbd
  case scr
  case sdd
  case sdg
  case sek
  case sgd
  case shp
  case sit
  case skk
  case sll
  case sos
  case srd
  case srg
  case ssp
  case std
  case stn
  case svc
  case syp
  case szl
  case thb
  case tjs
  case tmm
  case tmt
  case tnd
  case top
  case tpe
  case trl
  case `try`
  case ttd
  case twd
  case tzs
  case uah
  case ugx
  case usd
  case usn
  case uss
  case uyi
  case uyu
  case uzs
  case veb
  case vef
  case ves
  case vnd
  case vuv
  case wst
  case xaf
  case xag
  case xau
  case xba
  case xbb
  case xbc
  case xbd
  case xcd
  case xdr
  case xfo
  case xfu
  case xof
  case xpd
  case xpf
  case xpt
  case xsu
  case xts
  case xua
  case xxx
  case yer
  case yum
  case zar
  case zmk
  case zmw
  case zwd
  case zwl
  case zwn
  case zwr
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SDKLanguageOption {
  case custom(value: IAdvizeConversationSDK.GraphQL.Language)
  case `default`
}
public enum VisitorCustomData {
  case visitorCustomDataInt(Swift.Int)
  case visitorCustomDataString(Swift.String)
  case visitorCustomDataBoolean(Swift.Bool)
  case visitorCustomDataDouble(Swift.Double)
}
@objc(GraphQLLanguage) public enum ObjcGraphQLLanguage : Swift.Int {
  case aa
  case ab
  case ae
  case af
  case ak
  case am
  case an
  case ar
  case `as`
  case av
  case ay
  case az
  case ba
  case be
  case bg
  case bh
  case bi
  case bm
  case bn
  case bo
  case br
  case bs
  case ca
  case ce
  case ch
  case co
  case cr
  case cs
  case cu
  case cv
  case cy
  case da
  case de
  case dv
  case dz
  case ee
  case el
  case en
  case eo
  case es
  case et
  case eu
  case fa
  case ff
  case fi
  case fj
  case fo
  case fr
  case fy
  case ga
  case gd
  case gl
  case gn
  case gu
  case gv
  case ha
  case he
  case hi
  case ho
  case hr
  case ht
  case hu
  case hy
  case hz
  case ia
  case id
  case ie
  case ig
  case ii
  case ik
  case `in`
  case io
  case `is`
  case it
  case iu
  case iw
  case ja
  case ji
  case jv
  case ka
  case kg
  case ki
  case kj
  case kk
  case kl
  case km
  case kn
  case ko
  case kr
  case ks
  case ku
  case kv
  case kw
  case ky
  case la
  case lb
  case lg
  case li
  case ln
  case lo
  case lt
  case lu
  case lv
  case mg
  case mh
  case mi
  case mk
  case ml
  case mn
  case mo
  case mr
  case ms
  case mt
  case my
  case na
  case nb
  case nd
  case ne
  case ng
  case nl
  case nn
  case no
  case nr
  case nv
  case ny
  case oc
  case oj
  case om
  case or
  case os
  case pa
  case pi
  case pl
  case ps
  case pt
  case qu
  case rm
  case rn
  case ro
  case ru
  case rw
  case sa
  case sc
  case sd
  case se
  case sg
  case si
  case sk
  case sl
  case sm
  case sn
  case so
  case sq
  case sr
  case ss
  case st
  case su
  case sv
  case sw
  case ta
  case te
  case tg
  case th
  case ti
  case tk
  case tl
  case tn
  case to
  case tr
  case ts
  case tt
  case tw
  case ty
  case ug
  case uk
  case ur
  case uz
  case ve
  case vi
  case vo
  case wa
  case wo
  case xh
  case yi
  case yo
  case za
  case zh
  case zu
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Media : Swift.Equatable {
  public let url: Foundation.URL
  public let mimeType: Swift.String
  public let name: Swift.String
  public init(url: Foundation.URL, mimeType: Swift.String? = nil, name: Swift.String? = nil)
  public enum MimeType : Swift.String {
    case jpeg
    case png
    case gif
    case tif
    case pdf
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func == (a: IAdvizeConversationSDK.Media, b: IAdvizeConversationSDK.Media) -> Swift.Bool
}
extension URL {
  public var mimeType: Swift.String {
    get
  }
}
public struct Logger {
  public enum LogLevel : Swift.String {
    case verbose
    case info
    case warning
    case error
    case success
    public func intValue() -> Swift.Int
    public static func >= (lhs: IAdvizeConversationSDK.Logger.LogLevel, rhs: IAdvizeConversationSDK.Logger.LogLevel) -> Swift.Bool
    public static func == (lhs: IAdvizeConversationSDK.Logger.LogLevel, rhs: IAdvizeConversationSDK.Logger.LogLevel) -> Swift.Bool
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc(LoggerLogLevel) public enum ObjCLoggerLogLevel : Swift.Int {
  case verbose
  case info
  case warning
  case error
  case success
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol JWTTokenDelegate {
  @objc func jwtTokenDidExpired()
}
public enum GDPROption {
  case enabled(option: IAdvizeConversationSDK.GDPREnabledOption)
  case disabled
}
public struct AttachmentUrls {
  public var readUrl: Swift.String
  public var writeUrl: Swift.String
  public init(readUrl: Swift.String, writeUrl: Swift.String)
}
extension Date {
  public static func parseDateString(_ dateTimeString: Swift.String) -> Foundation.Date?
}
@objc(GraphQLApplicationMode) public enum ObjcGraphQLApplicationMode : Swift.Int {
  case dev
  case prod
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class IAdvizeSDK : ObjectiveC.NSObject {
  @objc public static let shared: IAdvizeConversationSDK.IAdvizeSDK
  @objc weak final public var jwtTokenDelegate: IAdvizeConversationSDK.JWTTokenDelegate?
  @objc final public var targetingController: IAdvizeConversationSDK.TargetingController {
    @objc get
  }
  @objc final public var conversationController: IAdvizeConversationSDK.ConversationController {
    @objc get
  }
  @objc final public var notificationController: IAdvizeConversationSDK.NotificationController {
    @objc get
  }
  @objc final public var transactionController: IAdvizeConversationSDK.TransactionController {
    @objc get
  }
  @objc final public var chatboxController: IAdvizeConversationSDK.ChatboxController {
    @objc get
  }
  final public var logLevel: IAdvizeConversationSDK.Logger.LogLevel
  final public func activate(projectId: Swift.Int, authenticationOption: IAdvizeConversationSDK.AuthenticationOption, gdprOption: IAdvizeConversationSDK.GDPROption = .disabled, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func logout()
  @objc override dynamic public init()
  @objc deinit
}
extension Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
public struct ChatboxConfiguration {
  public var mainColor: UIKit.UIColor
  public var automaticMessage: Swift.String?
  public var gdprMessage: Swift.String?
  public var font: UIKit.UIFont?
  public var navigationBarBackgroundColor: UIKit.UIColor
  public var navigationBarMainColor: UIKit.UIColor
  public var navigationBarTitle: Swift.String?
  public var incomingMessageAvatar: IAdvizeConversationSDK.IncomingMessageAvatar?
  public var presentationStyle: UIKit.UIModalPresentationStyle?
  public var presentingViewController: UIKit.UIViewController?
}
extension ChatboxConfiguration {
  public init()
}
@_inheritsConvenienceInitializers @objc final public class ChatboxController : ObjectiveC.NSObject {
  @objc final public var useDefaultChatButton: Swift.Bool
  final public func setupChatbox(configuration: IAdvizeConversationSDK.ChatboxConfiguration)
  @objc final public func setChatButtonPosition(leftMargin: Swift.Double, bottomMargin: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GDPRDelegate {
  @objc func didTapMoreInformation()
}
public typealias LegacyId = Swift.Int
extension UUID : Apollo.JSONDecodable, Apollo.JSONEncodable {
  public var jsonValue: Apollo.JSONValue {
    get
  }
  public init(jsonValue value: Apollo.JSONValue) throws
  public var lowercasedUUIDString: Swift.String {
    get
  }
}
public typealias DateTime = Foundation.Date
extension Date : Apollo.JSONDecodable, Apollo.JSONEncodable {
  public var jsonValue: Apollo.JSONValue {
    get
  }
  public init(jsonValue value: Apollo.JSONValue) throws
}
extension IAdvizeSDK {
  @available(swift, obsoleted: 1.0)
  @objc final public func getLogLevel() -> IAdvizeConversationSDK.ObjCLoggerLogLevel
  @available(swift, obsoleted: 1.0)
  @objc final public func setLogLevel(_ logLevel: IAdvizeConversationSDK.ObjCLoggerLogLevel)
  @available(swift, obsoleted: 1.0)
  @objc final public func activate(projectId: Swift.Int, authenticationOption: IAdvizeConversationSDK.ObjcAuthenticationOption, gdprOption: IAdvizeConversationSDK.ObjcGDPROption, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @objc(ChatboxConfiguration) public class ObjcChatboxConfiguration : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc override dynamic public init()
  @available(swift, obsoleted: 1.0)
  @objc public var mainColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var automaticMessage: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var gdprMessage: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarMainColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarTitle: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var incomingMessageAvatar: IAdvizeConversationSDK.ObjcIncomingMessageAvatar? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var presentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var presentingViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public class Transaction : ObjectiveC.NSObject, Foundation.NSCoding {
  public init(externalTransactionId: Swift.String, date: Foundation.Date, amount: Swift.Double, currency: IAdvizeConversationSDK.GraphQL.Currency)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class TransactionController : ObjectiveC.NSObject {
  @objc final public func registerTransaction(_ transaction: IAdvizeConversationSDK.Transaction)
  @objc override dynamic public init()
  @objc deinit
}
@objc(GDPREnabledOption) public class ObjcGDPREnabledOption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(legalInformationURL: Foundation.URL)
  @available(swift, obsoleted: 1.0)
  @objc public init(delegate: IAdvizeConversationSDK.GDPRDelegate)
  @objc override dynamic public init()
  @objc deinit
}
@objc(User) public class ObjcUser : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(name: Swift.String)
  @available(swift, obsoleted: 1.0)
  @objc public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TargetingControllerDelegate {
  @objc func activeTargetingRuleAvailabilityDidUpdate(isActiveTargetingRuleAvailable: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc final public class TargetingController : ObjectiveC.NSObject {
  final public var language: IAdvizeConversationSDK.SDKLanguageOption
  @objc weak final public var delegate: IAdvizeConversationSDK.TargetingControllerDelegate?
  @objc final public var isActiveTargetingRuleAvailable: Swift.Bool {
    @objc get
  }
  @objc final public func activateTargetingRule(targetingRuleId: Foundation.UUID)
  @objc final public func registerUserNavigation()
  @objc override dynamic public init()
  @objc deinit
}
extension TargetingController : IAdvizeConversationSDK.ConversationControllerDelegate {
  @objc final public func ongoingConversationStatusDidChange(hasOngoingConversation: Swift.Bool)
}
extension TargetingController {
  @available(swift, obsoleted: 1.0)
  @objc final public func getLanguage() -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @available(swift, obsoleted: 1.0)
  @objc final public func setLanguage(_ language: IAdvizeConversationSDK.ObjcSDKLanguageOption)
}
public enum IncomingMessageAvatar {
  case url(url: Foundation.URL)
  case image(image: UIKit.UIImage)
}
@_hasMissingDesignatedInitializers @objc(SDKLanguageOption) public class ObjcSDKLanguageOption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public static func custom(value: IAdvizeConversationSDK.ObjcGraphQLLanguage) -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @available(swift, obsoleted: 1.0)
  @objc public static func `default`() -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @objc override dynamic public init()
  @objc deinit
}
public typealias SynchronisedDataResponseHandler = ((Foundation.Data?) -> Swift.Void)
@_hasMissingDesignatedInitializers public class AlamofireUnifiedDataDownloader {
  public static let sharedInstance: IAdvizeConversationSDK.AlamofireUnifiedDataDownloader
  public func requestData(_ urlString: Swift.String, completion: @escaping IAdvizeConversationSDK.SynchronisedDataResponseHandler)
  public class func request(_ urlString: Swift.String, completion: @escaping IAdvizeConversationSDK.SynchronisedDataResponseHandler)
  @objc deinit
}
extension UIWindow {
  public static var key: UIKit.UIWindow? {
    get
  }
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: IAdvizeConversationSDK.KeychainSwiftAccessOptions, b: IAdvizeConversationSDK.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JWTOption {
  case secret(Swift.String)
  case token(Swift.String)
}
@_hasMissingDesignatedInitializers @objc(GDPROption) public class ObjcGDPROption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(gdprEnabledOption: IAdvizeConversationSDK.ObjcGDPREnabledOption)
  @available(swift, obsoleted: 1.0)
  @objc public static func disabled() -> IAdvizeConversationSDK.ObjcGDPROption
  @objc override dynamic public init()
  @objc deinit
}
@objc(VisitorCustomData) public class ObjcVisitorCustomData : ObjectiveC.NSObject {
  @objc public init(int: Swift.Int)
  @objc public init(string: Swift.String)
  @objc public init(boolean: Swift.Bool)
  @objc public init(double: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class NotificationController : ObjectiveC.NSObject {
  final public func registerPushToken(_ pushToken: Swift.String, applicationMode: IAdvizeConversationSDK.GraphQL.ApplicationMode)
  @objc final public func enablePushNotifications(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func disablePushNotifications(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func isIAdvizePushNotification(with userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(IncomingMessageAvatar) public class ObjcIncomingMessageAvatar : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(url: Foundation.URL)
  @available(swift, obsoleted: 1.0)
  @objc public init(image: UIKit.UIImage)
  @objc override dynamic public init()
  @objc deinit
}
extension GIFImageView {
  public func af_setAnimatedImage(withURL url: Foundation.URL, placeholderImage: UIKit.UIImage? = nil)
  public func af_setAnimatedImage(withData data: Foundation.Data, placeholderImage: UIKit.UIImage? = nil)
}
extension TimeZone {
  public static func timeZoneWithString(_ dateString: Swift.String) -> Foundation.TimeZone!
}
extension NotificationController {
  @objc final public func registerPushToken(_ pushToken: Swift.String, applicationMode: IAdvizeConversationSDK.ObjcGraphQLApplicationMode)
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPad2, iPad3, iPad4, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPadMini1, iPadMini2, iPadMini3, iPadAir1, iPadAir2, iPadPro9_7, iPadPro9_7_cell, iPadPro10_5, iPadPro10_5_cell, iPadPro12_9, iPadPro12_9_cell, iPhone6, iPhone6plus, iPhone6S, iPhone6Splus, iPhoneSE, iPhone7, iPhone7plus, iPhone8, iPhone8plus, iPhoneX, iPhoneXS, iPhoneXSmax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: IAdvizeConversationSDK.Model {
    get
  }
}
public enum GDPREnabledOption {
  case legalInformation(url: Foundation.URL)
  case delegate(delegate: IAdvizeConversationSDK.GDPRDelegate)
}
extension ChatboxController {
  @objc final public func setupChatbox(configuration: IAdvizeConversationSDK.ObjcChatboxConfiguration)
}
extension GraphQL.ImageAttachment : ConversationUI.Image {
  public var imageURL: Foundation.URL {
    get
  }
  public var imageName: Swift.String? {
    get
  }
}
extension GraphQL.FileAttachment : ConversationUI.File {
  public var fileURL: Foundation.URL {
    get
  }
}
extension GraphQL.FileAttachment : ConversationUI.Image {
  public var imageURL: Foundation.URL {
    get
  }
  public var imageName: Swift.String? {
    get
  }
}
extension GraphQL.QuickReplyMenuAttachment : ConversationUI.QuickReplyMenu {
}
extension GraphQL.ConversationMessageAttachmentLinkAction : ConversationUI.CardAction {
  public var type: ConversationUI.CardActionType {
    get
  }
  public var cardActionURL: Foundation.URL {
    get
  }
}
extension GraphQL.ProductOfferAttachment : ConversationUI.ProductOffer {
  public var description: Swift.String? {
    get
  }
  public var productOfferActions: [ConversationUI.CardAction] {
    get
  }
  public var imageLink: ConversationUI.ImageLink? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var price: Swift.String {
    get
  }
  public var offerPrice: Swift.String? {
    get
  }
  public var productIsAvailable: Swift.Bool? {
    get
  }
}
extension GraphQL.ConversationMessageAttachmentImageLink : ConversationUI.ImageLink {
  public var cardImageURL: Foundation.URL {
    get
  }
  public var cardImageDescription: Swift.String {
    get
  }
}
extension GraphQL.CardAttachment : ConversationUI.Card {
  public var title: Swift.String? {
    get
  }
  public var text: Swift.String? {
    get
  }
  public var imageLink: ConversationUI.ImageLink? {
    get
  }
  public var cardActions: [ConversationUI.CardAction] {
    get
  }
}
extension GraphQL.CardBundleAttachment : ConversationUI.CardBundle {
  public var cardBundleCards: [ConversationUI.Card] {
    get
  }
}
extension GraphQL.ProductOfferBundleAttachment : ConversationUI.ProductOfferBundle {
  public var bundleProductOffers: [ConversationUI.ProductOffer] {
    get
  }
}
public struct User {
  public var name: Swift.String
  public init(name: Swift.String)
  public static func name() -> Swift.String
}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.Media.MimeType : Swift.Equatable {}
extension IAdvizeConversationSDK.Media.MimeType : Swift.Hashable {}
extension IAdvizeConversationSDK.Media.MimeType : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.Equatable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.Hashable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.KeychainSwiftAccessOptions : Swift.Equatable {}
extension IAdvizeConversationSDK.KeychainSwiftAccessOptions : Swift.Hashable {}
extension IAdvizeConversationSDK.Model : Swift.Equatable {}
extension IAdvizeConversationSDK.Model : Swift.Hashable {}
extension IAdvizeConversationSDK.Model : Swift.RawRepresentable {}
