// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IAdvizeConversationSDK
import AVFAudio
import AVFoundation
import Apollo
import CoreServices
import Foundation
import Gifu
@_exported import IAdvizeConversationSDK
import JWTDecode
import MobileCoreServices
import Photos
import SafariServices
import Security
import Swift
import SwiftGraylog
import SwiftUI
import SystemConfiguration
import TwilioVideo
import UIKit
import UserNotifications
import XMPPFramework
import _Concurrency
extension IAdvizeConversationSDK.Transaction {
  @available(swift, obsoleted: 1.0)
  @objc convenience dynamic public init(externalTransactionId: Swift.String, date: Foundation.Date, amount: Swift.Double, currency: IAdvizeConversationSDK.ObjcGraphQLCurrency)
}
@_inheritsConvenienceInitializers @objc final public class ConversationController : ObjectiveC.NSObject {
  @objc weak final public var delegate: IAdvizeConversationSDK.ConversationControllerDelegate?
  @objc final public var hasOngoingConversation: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ConversationChannel) public class ObjcConversationChannel : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public func initWithChat()
  @available(swift, obsoleted: 1.0)
  @objc public func initWithVideo()
  @available(swift, obsoleted: 1.0)
  @objc override dynamic public init()
  @available(swift, obsoleted: 1.0)
  @objc public init(conversationChannel: IAdvizeConversationSDK.ObjcConversationChannel)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class TargetingController : ObjectiveC.NSObject {
  final public var language: IAdvizeConversationSDK.SDKLanguageOption
  @objc weak final public var delegate: IAdvizeConversationSDK.TargetingControllerDelegate?
  @objc final public var isActiveTargetingRuleAvailable: Swift.Bool {
    @objc get
  }
  @objc final public func activateTargetingRule(targetingRule: IAdvizeConversationSDK.TargetingRule)
  final public func registerUserNavigation(navigationOption: IAdvizeConversationSDK.NavigationOption = .clearActiveRule)
  @objc override dynamic public init()
  @objc deinit
}
public enum AuthenticationOption : Swift.Equatable {
  case anonymous
  case simple(userId: Swift.String)
  public static func == (lhs: IAdvizeConversationSDK.AuthenticationOption, rhs: IAdvizeConversationSDK.AuthenticationOption) -> Swift.Bool
}
@objc public protocol ConversationControllerDelegate {
  @objc func ongoingConversationStatusDidChange(hasOngoingConversation: Swift.Bool)
  @objc optional func didReceiveNewMessage(content: Swift.String)
  @objc optional func conversationController(_ controller: IAdvizeConversationSDK.ConversationController, shouldOpen url: Foundation.URL) -> Swift.Bool
}
@objc(GraphQLCurrency) public enum ObjcGraphQLCurrency : Swift.Int {
  case adp
  case aed
  case afa
  case afn
  case all
  case amd
  case ang
  case aoa
  case ars
  case ats
  case aud
  case awg
  case aym
  case azm
  case azn
  case bam
  case bbd
  case bdt
  case bef
  case bgl
  case bgn
  case bhd
  case bif
  case bmd
  case bnd
  case bob
  case bov
  case brl
  case bsd
  case btn
  case bwp
  case byb
  case byn
  case byr
  case bzd
  case cad
  case cdf
  case che
  case chf
  case chw
  case clf
  case clp
  case cny
  case cop
  case cou
  case crc
  case csd
  case cuc
  case cup
  case cve
  case cyp
  case czk
  case dem
  case djf
  case dkk
  case dop
  case dzd
  case eek
  case egp
  case ern
  case esp
  case etb
  case eur
  case fim
  case fjd
  case fkp
  case frf
  case gbp
  case gel
  case ghc
  case ghs
  case gip
  case gmd
  case gnf
  case grd
  case gtq
  case gwp
  case gyd
  case hkd
  case hnl
  case hrk
  case htg
  case huf
  case idr
  case iep
  case ils
  case inr
  case iqd
  case irr
  case isk
  case itl
  case jmd
  case jod
  case jpy
  case kes
  case kgs
  case khr
  case kmf
  case kpw
  case krw
  case kwd
  case kyd
  case kzt
  case lak
  case lbp
  case lkr
  case lrd
  case lsl
  case ltl
  case luf
  case lvl
  case lyd
  case mad
  case mdl
  case mga
  case mgf
  case mkd
  case mmk
  case mnt
  case mop
  case mro
  case mru
  case mtl
  case mur
  case mvr
  case mwk
  case mxn
  case mxv
  case myr
  case mzm
  case mzn
  case nad
  case ngn
  case nio
  case nlg
  case nok
  case npr
  case nzd
  case omr
  case pab
  case pen
  case pgk
  case php
  case pkr
  case pln
  case pte
  case pyg
  case qar
  case rol
  case ron
  case rsd
  case rub
  case rur
  case rwf
  case sar
  case sbd
  case scr
  case sdd
  case sdg
  case sek
  case sgd
  case shp
  case sit
  case skk
  case sll
  case sos
  case srd
  case srg
  case ssp
  case std
  case stn
  case svc
  case syp
  case szl
  case thb
  case tjs
  case tmm
  case tmt
  case tnd
  case top
  case tpe
  case trl
  case `try`
  case ttd
  case twd
  case tzs
  case uah
  case ugx
  case usd
  case usn
  case uss
  case uyi
  case uyu
  case uzs
  case veb
  case vef
  case ves
  case vnd
  case vuv
  case wst
  case xaf
  case xag
  case xau
  case xba
  case xbb
  case xbc
  case xbd
  case xcd
  case xdr
  case xfo
  case xfu
  case xof
  case xpd
  case xpf
  case xpt
  case xsu
  case xts
  case xua
  case xxx
  case yer
  case yum
  case zar
  case zmk
  case zmw
  case zwd
  case zwl
  case zwn
  case zwr
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConversationChannel : Swift.String {
  case chat
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol KeyboardObserverDelegate : AnyObject {
  func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardDidChangeFrame keyboardFrame: CoreGraphics.CGRect)
  func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardWillShowWith keyboardFrame: CoreGraphics.CGRect)
  func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardWillHideWith keyboardFrame: CoreGraphics.CGRect)
}
extension IAdvizeConversationSDK.KeyboardObserverDelegate {
  public func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardDidChangeFrame keyboardFrame: CoreGraphics.CGRect)
  public func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardWillShowWith keyboardFrame: CoreGraphics.CGRect)
  public func keyboardObserver(_ observer: IAdvizeConversationSDK.KeyboardObserver, keyboardWillHideWith keyboardFrame: CoreGraphics.CGRect)
}
public class KeyboardObserver {
  weak public var delegate: IAdvizeConversationSDK.KeyboardObserverDelegate?
  public init(contextView: UIKit.UIView)
  @objc deinit
}
public enum SDKLanguageOption {
  case custom(value: IAdvizeConversationSDK.Language)
  case `default`
}
public enum CustomData {
  case customDataInt(Swift.Int)
  case customDataString(Swift.String)
  case customDataBoolean(Swift.Bool)
  case customDataDouble(Swift.Double)
}
@objc(GraphQLLanguage) public enum ObjcGraphQLLanguage : Swift.Int {
  case aa
  case ab
  case ae
  case af
  case ak
  case am
  case an
  case ar
  case `as`
  case av
  case ay
  case az
  case ba
  case be
  case bg
  case bh
  case bi
  case bm
  case bn
  case bo
  case br
  case bs
  case ca
  case ce
  case ch
  case co
  case cr
  case cs
  case cu
  case cv
  case cy
  case da
  case de
  case dv
  case dz
  case ee
  case el
  case en
  case eo
  case es
  case et
  case eu
  case fa
  case ff
  case fi
  case fj
  case fo
  case fr
  case fy
  case ga
  case gd
  case gl
  case gn
  case gu
  case gv
  case ha
  case he
  case hi
  case ho
  case hr
  case ht
  case hu
  case hy
  case hz
  case ia
  case id
  case ie
  case ig
  case ii
  case ik
  case `in`
  case io
  case `is`
  case it
  case iu
  case iw
  case ja
  case ji
  case jv
  case ka
  case kg
  case ki
  case kj
  case kk
  case kl
  case km
  case kn
  case ko
  case kr
  case ks
  case ku
  case kv
  case kw
  case ky
  case la
  case lb
  case lg
  case li
  case ln
  case lo
  case lt
  case lu
  case lv
  case mg
  case mh
  case mi
  case mk
  case ml
  case mn
  case mo
  case mr
  case ms
  case mt
  case my
  case na
  case nb
  case nd
  case ne
  case ng
  case nl
  case nn
  case no
  case nr
  case nv
  case ny
  case oc
  case oj
  case om
  case or
  case os
  case pa
  case pi
  case pl
  case ps
  case pt
  case qu
  case rm
  case rn
  case ro
  case ru
  case rw
  case sa
  case sc
  case sd
  case se
  case sg
  case si
  case sk
  case sl
  case sm
  case sn
  case so
  case sq
  case sr
  case ss
  case st
  case su
  case sv
  case sw
  case ta
  case te
  case tg
  case th
  case ti
  case tk
  case tl
  case tn
  case to
  case tr
  case ts
  case tt
  case tw
  case ty
  case ug
  case uk
  case ur
  case uz
  case ve
  case vi
  case vo
  case wa
  case wo
  case xh
  case yi
  case yo
  case za
  case zh
  case zu
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Logger {
  public enum LogLevel : Swift.String {
    case verbose
    case info
    case warning
    case error
    case success
    public func intValue() -> Swift.Int
    public static func >= (lhs: IAdvizeConversationSDK.Logger.LogLevel, rhs: IAdvizeConversationSDK.Logger.LogLevel) -> Swift.Bool
    public static func == (lhs: IAdvizeConversationSDK.Logger.LogLevel, rhs: IAdvizeConversationSDK.Logger.LogLevel) -> Swift.Bool
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum NavigationOption {
  case clearActiveRule
  case keepActiveRule
  case activateNewRule(targetingRule: IAdvizeConversationSDK.TargetingRule)
}
@objc(LoggerLogLevel) public enum ObjCLoggerLogLevel : Swift.Int {
  case verbose
  case info
  case warning
  case error
  case success
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GDPROption {
  case enabled(option: IAdvizeConversationSDK.GDPREnabledOption)
  case disabled
}
public enum Channel : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = Swift.String
  case appleBusinessChat
  case call
  case chat
  case facebook
  case facebookBusinessOnMessenger
  case instagram
  case mobileApp
  case sms
  case twitter
  case video
  case whatsapp
  case __unknown(IAdvizeConversationSDK.Channel.RawValue)
  public init?(rawValue: IAdvizeConversationSDK.Channel.RawValue)
  public var rawValue: IAdvizeConversationSDK.Channel.RawValue {
    get
  }
  public static func == (lhs: IAdvizeConversationSDK.Channel, rhs: IAdvizeConversationSDK.Channel) -> Swift.Bool
  public static var allCases: [IAdvizeConversationSDK.Channel] {
    get
  }
  public typealias AllCases = [IAdvizeConversationSDK.Channel]
}
public enum Language : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = Swift.String
  case aa
  case ab
  case ae
  case af
  case ak
  case am
  case an
  case ar
  case `as`
  case av
  case ay
  case az
  case ba
  case be
  case bg
  case bh
  case bi
  case bm
  case bn
  case bo
  case br
  case bs
  case ca
  case ce
  case ch
  case co
  case cr
  case cs
  case cu
  case cv
  case cy
  case da
  case de
  case dv
  case dz
  case ee
  case el
  case en
  case eo
  case es
  case et
  case eu
  case fa
  case ff
  case fi
  case fj
  case fo
  case fr
  case fy
  case ga
  case gd
  case gl
  case gn
  case gu
  case gv
  case ha
  case he
  case hi
  case ho
  case hr
  case ht
  case hu
  case hy
  case hz
  case ia
  case id
  case ie
  case ig
  case ii
  case ik
  case `in`
  case io
  case `is`
  case it
  case iu
  case iw
  case ja
  case ji
  case jv
  case ka
  case kg
  case ki
  case kj
  case kk
  case kl
  case km
  case kn
  case ko
  case kr
  case ks
  case ku
  case kv
  case kw
  case ky
  case la
  case lb
  case lg
  case li
  case ln
  case lo
  case lt
  case lu
  case lv
  case mg
  case mh
  case mi
  case mk
  case ml
  case mn
  case mo
  case mr
  case ms
  case mt
  case my
  case na
  case nb
  case nd
  case ne
  case ng
  case nl
  case nn
  case no
  case nr
  case nv
  case ny
  case oc
  case oj
  case om
  case or
  case os
  case pa
  case pi
  case pl
  case ps
  case pt
  case qu
  case rm
  case rn
  case ro
  case ru
  case rw
  case sa
  case sc
  case sd
  case se
  case sg
  case si
  case sk
  case sl
  case sm
  case sn
  case so
  case sq
  case sr
  case ss
  case st
  case su
  case sv
  case sw
  case ta
  case te
  case tg
  case th
  case ti
  case tk
  case tl
  case tn
  case to
  case tr
  case ts
  case tt
  case tw
  case ty
  case ug
  case uk
  case ur
  case uz
  case ve
  case vi
  case vo
  case wa
  case wo
  case xh
  case yi
  case yo
  case za
  case zh
  case zu
  case __unknown(IAdvizeConversationSDK.Language.RawValue)
  public init?(rawValue: IAdvizeConversationSDK.Language.RawValue)
  public var rawValue: IAdvizeConversationSDK.Language.RawValue {
    get
  }
  public static func == (lhs: IAdvizeConversationSDK.Language, rhs: IAdvizeConversationSDK.Language) -> Swift.Bool
  public static var allCases: [IAdvizeConversationSDK.Language] {
    get
  }
  public typealias AllCases = [IAdvizeConversationSDK.Language]
}
public enum Source : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = Swift.String
  case appleBusinessChat
  case facebook
  case facebookBusinessOnMessenger
  case mobileApp
  case onsite
  case sms
  case twitter
  case whatsapp
  case __unknown(IAdvizeConversationSDK.Source.RawValue)
  public init?(rawValue: IAdvizeConversationSDK.Source.RawValue)
  public var rawValue: IAdvizeConversationSDK.Source.RawValue {
    get
  }
  public static func == (lhs: IAdvizeConversationSDK.Source, rhs: IAdvizeConversationSDK.Source) -> Swift.Bool
  public static var allCases: [IAdvizeConversationSDK.Source] {
    get
  }
  public typealias AllCases = [IAdvizeConversationSDK.Source]
}
public enum ApplicationMode : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = Swift.String
  case dev
  case prod
  case __unknown(IAdvizeConversationSDK.ApplicationMode.RawValue)
  public init?(rawValue: IAdvizeConversationSDK.ApplicationMode.RawValue)
  public var rawValue: IAdvizeConversationSDK.ApplicationMode.RawValue {
    get
  }
  public static func == (lhs: IAdvizeConversationSDK.ApplicationMode, rhs: IAdvizeConversationSDK.ApplicationMode) -> Swift.Bool
  public static var allCases: [IAdvizeConversationSDK.ApplicationMode] {
    get
  }
  public typealias AllCases = [IAdvizeConversationSDK.ApplicationMode]
}
public enum Currency : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = Swift.String
  case adp
  case aed
  case afa
  case afn
  case all
  case amd
  case ang
  case aoa
  case ars
  case ats
  case aud
  case awg
  case aym
  case azm
  case azn
  case bam
  case bbd
  case bdt
  case bef
  case bgl
  case bgn
  case bhd
  case bif
  case bmd
  case bnd
  case bob
  case bov
  case brl
  case bsd
  case btn
  case bwp
  case byb
  case byn
  case byr
  case bzd
  case cad
  case cdf
  case che
  case chf
  case chw
  case clf
  case clp
  case cny
  case cop
  case cou
  case crc
  case csd
  case cuc
  case cup
  case cve
  case cyp
  case czk
  case dem
  case djf
  case dkk
  case dop
  case dzd
  case eek
  case egp
  case ern
  case esp
  case etb
  case eur
  case fim
  case fjd
  case fkp
  case frf
  case gbp
  case gel
  case ghc
  case ghs
  case gip
  case gmd
  case gnf
  case grd
  case gtq
  case gwp
  case gyd
  case hkd
  case hnl
  case hrk
  case htg
  case huf
  case idr
  case iep
  case ils
  case inr
  case iqd
  case irr
  case isk
  case itl
  case jmd
  case jod
  case jpy
  case kes
  case kgs
  case khr
  case kmf
  case kpw
  case krw
  case kwd
  case kyd
  case kzt
  case lak
  case lbp
  case lkr
  case lrd
  case lsl
  case ltl
  case luf
  case lvl
  case lyd
  case mad
  case mdl
  case mga
  case mgf
  case mkd
  case mmk
  case mnt
  case mop
  case mro
  case mru
  case mtl
  case mur
  case mvr
  case mwk
  case mxn
  case mxv
  case myr
  case mzm
  case mzn
  case nad
  case ngn
  case nio
  case nlg
  case nok
  case npr
  case nzd
  case omr
  case pab
  case pen
  case pgk
  case php
  case pkr
  case pln
  case pte
  case pyg
  case qar
  case rol
  case ron
  case rsd
  case rub
  case rur
  case rwf
  case sar
  case sbd
  case scr
  case sdd
  case sdg
  case sek
  case sgd
  case shp
  case sit
  case skk
  case sll
  case sos
  case srd
  case srg
  case ssp
  case std
  case stn
  case svc
  case syp
  case szl
  case thb
  case tjs
  case tmm
  case tmt
  case tnd
  case top
  case tpe
  case trl
  case `try`
  case ttd
  case twd
  case tzs
  case uah
  case ugx
  case usd
  case usn
  case uss
  case uyi
  case uyu
  case uzs
  case veb
  case vef
  case ves
  case vnd
  case vuv
  case wst
  case xaf
  case xag
  case xau
  case xba
  case xbb
  case xbc
  case xbd
  case xcd
  case xdr
  case xfo
  case xfu
  case xof
  case xpd
  case xpf
  case xpt
  case xsu
  case xts
  case xua
  case xxx
  case yer
  case yum
  case zar
  case zmk
  case zmw
  case zwd
  case zwl
  case zwn
  case zwr
  case __unknown(IAdvizeConversationSDK.Currency.RawValue)
  public init?(rawValue: IAdvizeConversationSDK.Currency.RawValue)
  public var rawValue: IAdvizeConversationSDK.Currency.RawValue {
    get
  }
  public static func == (lhs: IAdvizeConversationSDK.Currency, rhs: IAdvizeConversationSDK.Currency) -> Swift.Bool
  public static var allCases: [IAdvizeConversationSDK.Currency] {
    get
  }
  public typealias AllCases = [IAdvizeConversationSDK.Currency]
}
@objc public protocol TargetingControllerDelegate {
  @objc func activeTargetingRuleAvailabilityDidUpdate(isActiveTargetingRuleAvailable: Swift.Bool)
}
@objc(GraphQLApplicationMode) public enum ObjcGraphQLApplicationMode : Swift.Int {
  case dev
  case prod
  case __unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ActivationStatus {
  case off
  case activating
  case activated
  public static func == (a: IAdvizeConversationSDK.ActivationStatus, b: IAdvizeConversationSDK.ActivationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class IAdvizeSDK : ObjectiveC.NSObject {
  final public var activationStatus: IAdvizeConversationSDK.ActivationStatus {
    get
  }
  @objc public static let shared: IAdvizeConversationSDK.IAdvizeSDK
  @objc final public var targetingController: IAdvizeConversationSDK.TargetingController {
    @objc get
  }
  @objc final public var conversationController: IAdvizeConversationSDK.ConversationController {
    @objc get
  }
  @objc final public var notificationController: IAdvizeConversationSDK.NotificationController {
    @objc get
  }
  @objc final public var transactionController: IAdvizeConversationSDK.TransactionController {
    @objc get
  }
  @objc final public var chatboxController: IAdvizeConversationSDK.ChatboxController {
    @objc get
  }
  @objc final public var visitorController: IAdvizeConversationSDK.VisitorController {
    @objc get
  }
  final public var logLevel: IAdvizeConversationSDK.Logger.LogLevel
  final public func activate(projectId: Swift.Int, authenticationOption: IAdvizeConversationSDK.AuthenticationOption, gdprOption: IAdvizeConversationSDK.GDPROption = .disabled, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func logout(completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public struct ChatboxConfiguration {
  public var mainColor: UIKit.UIColor
  public var automaticMessage: Swift.String?
  public var gdprMessage: Swift.String?
  public var font: UIKit.UIFont?
  public var navigationBarBackgroundColor: UIKit.UIColor
  public var navigationBarMainColor: UIKit.UIColor
  public var navigationBarTitle: Swift.String?
  public var incomingMessageAvatar: IAdvizeConversationSDK.IncomingMessageAvatar?
  public var presentationStyle: UIKit.UIModalPresentationStyle?
  public var presentingViewController: UIKit.UIViewController?
}
extension IAdvizeConversationSDK.ChatboxConfiguration {
  public init()
}
@objc public protocol ChatboxControllerDelegate {
  @objc optional func chatboxDidClose()
}
@_inheritsConvenienceInitializers @objc final public class ChatboxController : ObjectiveC.NSObject {
  @objc final public var useDefaultFloatingButton: Swift.Bool {
    @objc get
    @objc set
  }
  @objc weak final public var delegate: IAdvizeConversationSDK.ChatboxControllerDelegate?
  final public func setupChatbox(configuration: IAdvizeConversationSDK.ChatboxConfiguration)
  @objc final public func setFloatingButtonPosition(leftMargin: Swift.Double, bottomMargin: Swift.Double)
  @objc final public func presentChatbox(animated: Swift.Bool = true, presentingViewController: UIKit.UIViewController? = nil, completion: (() -> Swift.Void)? = nil)
  @objc final public func dismissChatbox(animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc final public func isChatboxPresented() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GDPRDelegate {
  @objc func didTapMoreInformation()
}
public enum AppFont : Swift.String {
  case proximaNova
  case proximaNovaItalic
  case proximaNovaSemibold
  case proximaNovaSemiboldItalic
  case montLight
  case montBook
  case montHeavy
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIFont {
  public class func preferredAppFont(forTextStyle style: UIKit.UIFont.TextStyle) -> UIKit.UIFont
  convenience public init(appFont: IAdvizeConversationSDK.AppFont, fontSize: CoreGraphics.CGFloat)
}
extension UIKit.UIFont.TextStyle {
  public static var allStyles: [UIKit.UIFont.TextStyle] {
    get
  }
}
extension Foundation.UUID : Apollo.JSONDecodable, Apollo.JSONEncodable {
  public var jsonValue: Apollo.JSONValue {
    get
  }
  public init(jsonValue value: Apollo.JSONValue) throws
  public var lowercasedUUIDString: Swift.String {
    get
  }
}
extension Foundation.Date : Apollo.JSONDecodable, Apollo.JSONEncodable {
  public var jsonValue: Apollo.JSONValue {
    get
  }
  public init(jsonValue value: Apollo.JSONValue) throws
}
extension IAdvizeConversationSDK.IAdvizeSDK {
  @available(swift, obsoleted: 1.0)
  @objc final public func getLogLevel() -> IAdvizeConversationSDK.ObjCLoggerLogLevel
  @available(swift, obsoleted: 1.0)
  @objc final public func setLogLevel(_ logLevel: IAdvizeConversationSDK.ObjCLoggerLogLevel)
  @available(swift, obsoleted: 1.0)
  @objc final public func activate(projectId: Swift.Int, authenticationOption: IAdvizeConversationSDK.ObjcAuthenticationOption, gdprOption: IAdvizeConversationSDK.ObjcGDPROption, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @objc(ChatboxConfiguration) public class ObjcChatboxConfiguration : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc override dynamic public init()
  @available(swift, obsoleted: 1.0)
  @objc public var mainColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var automaticMessage: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var gdprMessage: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarMainColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var navigationBarTitle: Swift.String? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var incomingMessageAvatar: IAdvizeConversationSDK.ObjcIncomingMessageAvatar? {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var presentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  @available(swift, obsoleted: 1.0)
  @objc public var presentingViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public class Transaction : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let externalTransactionId: Swift.String
  final public let date: Foundation.Date
  final public let amount: Swift.Double
  final public let currency: IAdvizeConversationSDK.Currency
  public init(externalTransactionId: Swift.String, date: Foundation.Date, amount: Swift.Double, currency: IAdvizeConversationSDK.Currency)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class TransactionController : ObjectiveC.NSObject {
  @objc final public func registerTransaction(_ transaction: IAdvizeConversationSDK.Transaction)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var colors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(GDPREnabledOption) public class ObjcGDPREnabledOption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(legalInformationURL: Foundation.URL)
  @available(swift, obsoleted: 1.0)
  @objc public init(delegate: IAdvizeConversationSDK.GDPRDelegate)
  @objc deinit
}
extension IAdvizeConversationSDK.TargetingController {
  @available(swift, obsoleted: 1.0)
  @objc final public func getLanguage() -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @available(swift, obsoleted: 1.0)
  @objc final public func setLanguage(_ language: IAdvizeConversationSDK.ObjcSDKLanguageOption)
  @available(swift, obsoleted: 1.0)
  @objc final public func registerUserNavigation(navigationOption: IAdvizeConversationSDK.ObjCNavigationOption? = nil)
}
public enum IncomingMessageAvatar {
  case url(url: Foundation.URL)
  case image(image: UIKit.UIImage)
}
@_hasMissingDesignatedInitializers @objc(SDKLanguageOption) public class ObjcSDKLanguageOption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public static func custom(value: IAdvizeConversationSDK.ObjcGraphQLLanguage) -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @available(swift, obsoleted: 1.0)
  @objc public static func `default`() -> IAdvizeConversationSDK.ObjcSDKLanguageOption
  @objc deinit
}
@objc public class TargetingRule : ObjectiveC.NSObject {
  public init(id: Foundation.UUID, conversationChannel: IAdvizeConversationSDK.ConversationChannel)
  @objc public init(id: Foundation.UUID, objcConversationChannel: IAdvizeConversationSDK.ObjcConversationChannel)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(GDPROption) public class ObjcGDPROption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(gdprEnabledOption: IAdvizeConversationSDK.ObjcGDPREnabledOption)
  @available(swift, obsoleted: 1.0)
  @objc public static func disabled() -> IAdvizeConversationSDK.ObjcGDPROption
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Label : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public var textStyle: UIKit.UIFont.TextStyle? {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineHeightMultiple: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var lineBreakMode: UIKit.NSLineBreakMode {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc(VisitorCustomData) public class ObjcVisitorCustomData : ObjectiveC.NSObject {
  @objc public init(int: Swift.Int)
  @objc public init(string: Swift.String)
  @objc public init(boolean: Swift.Bool)
  @objc public init(double: Swift.Double)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class VisitorController : ObjectiveC.NSObject {
  final public func registerCustomData(customData: [Swift.String : IAdvizeConversationSDK.CustomData], completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NavigationOption) public class ObjCNavigationOption : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public func initWithClearActiveRule()
  @available(swift, obsoleted: 1.0)
  @objc public func initWithKeepActiveRule()
  @available(swift, obsoleted: 1.0)
  @objc public init(withNewTargetingRuleId targetingRule: IAdvizeConversationSDK.TargetingRule)
  @available(swift, obsoleted: 1.0)
  @objc override dynamic public init()
  @available(swift, obsoleted: 1.0)
  @objc public init(navigationOption: IAdvizeConversationSDK.ObjCNavigationOption)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Button : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var textStyle: UIKit.UIFont.TextStyle? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitle(_ title: Swift.String?, for state: UIKit.UIControl.State)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class NotificationController : ObjectiveC.NSObject {
  final public func registerPushToken(_ pushToken: Swift.String, applicationMode: IAdvizeConversationSDK.ApplicationMode)
  @objc final public func enablePushNotifications(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func disablePushNotifications(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func isIAdvizePushNotification(with userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(IncomingMessageAvatar) public class ObjcIncomingMessageAvatar : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(url: Foundation.URL)
  @available(swift, obsoleted: 1.0)
  @objc public init(image: UIKit.UIImage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class XibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension IAdvizeConversationSDK.NotificationController {
  @objc final public func registerPushToken(_ pushToken: Swift.String, applicationMode: IAdvizeConversationSDK.ObjcGraphQLApplicationMode)
}
@objc(AuthenticationOption) public class ObjcAuthenticationOption : ObjectiveC.NSObject {
  @objc public func initWithAnonymous()
  @available(swift, obsoleted: 1.0)
  @objc public init(simple userId: Swift.String)
  @objc deinit
}
public enum GDPREnabledOption {
  case legalInformation(url: Foundation.URL)
  case delegate(delegate: IAdvizeConversationSDK.GDPRDelegate)
}
extension IAdvizeConversationSDK.ChatboxController {
  @objc final public func setupChatbox(configuration: IAdvizeConversationSDK.ObjcChatboxConfiguration)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func setRootViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLCurrency : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ConversationChannel : Swift.Equatable {}
extension IAdvizeConversationSDK.ConversationChannel : Swift.Hashable {}
extension IAdvizeConversationSDK.ConversationChannel : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLLanguage : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.Equatable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.Hashable {}
extension IAdvizeConversationSDK.Logger.LogLevel : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjCLoggerLogLevel : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.Equatable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.Hashable {}
extension IAdvizeConversationSDK.ObjcGraphQLApplicationMode : Swift.RawRepresentable {}
extension IAdvizeConversationSDK.ActivationStatus : Swift.Equatable {}
extension IAdvizeConversationSDK.ActivationStatus : Swift.Hashable {}
extension IAdvizeConversationSDK.AppFont : Swift.Equatable {}
extension IAdvizeConversationSDK.AppFont : Swift.Hashable {}
extension IAdvizeConversationSDK.AppFont : Swift.RawRepresentable {}
